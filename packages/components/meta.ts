[
  {
    tag: 'p-accordion',
    props: [
      {
        name: 'compact',
        description: 'Displays the Accordion as compact version with thinner border and smaller paddings.',
        type: 'boolean',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'heading',
        description: 'Defines the heading used in accordion.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'headingTag',
        description: 'Sets a heading tag, so it fits correctly within the outline of the page.',
        type: 'AccordionHeadingTag',
        defaultValue: "'h2'",
        allowedValues: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'open',
        description: 'Defines if accordion is open.',
        type: 'boolean',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'size',
        description: 'The text size.',
        type: 'BreakpointCustomizable<AccordionSize>',
        defaultValue: "'small'",
        allowedValues: [
          null,
          null,
          'medium"; s?: "small',
          'medium"; xs?: "small',
          'medium"; m?: "small',
          'medium"; l?: "small',
          'medium"; xl?: "small',
          'medium"; xxl?: "small',
          'medium"; } & { base: "small',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'sticky',
        description: 'Sticks the Accordion heading at the top, fixed while scrolling',
        type: 'boolean',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: true,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'tag',
        description:
          ', will be removed with next major release, use `heading-tag` instead.\nSets a heading tag, so it fits correctly within the outline of the page.',
        type: 'AccordionTag',
        allowedValues: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the color when used on dark background.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-banner',
    props: [
      {
        name: 'description',
        description: 'Description of the banner.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'dismissButton',
        description: 'If false, the banner will not have a dismiss button.',
        type: 'boolean',
        defaultValue: 'true',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'heading',
        description: 'Heading of the banner.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'headingTag',
        description: 'Sets a heading tag, so it fits correctly within the outline of the page.',
        type: 'BannerHeadingTag',
        defaultValue: "'h5'",
        allowedValues: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'open',
        description: 'If true, the banner is open.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'persistent',
        description:
          'since v3.0.0, will be removed with next major release, use `dismissButton` instead.\nDefines if the banner can be closed/removed by the user.',
        type: 'boolean',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'state',
        description: 'State of the banner.',
        type: 'BannerState',
        defaultValue: "'info'",
        allowedValues: ['error', 'info', 'neutral', 'warning'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the banner color depending on the theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'width',
        description: 'Has no effect anymore',
        type: 'BannerWidth',
        allowedValues: ['basic', 'extended', 'fluid'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-button',
    props: [
      {
        name: 'aria',
        description: 'Add ARIA attributes.',
        type: 'SelectedAriaAttributes<ButtonAriaAttribute>',
        allowedValues: [null, null, 'dialog', 'menu', 'true', 'false', 'listbox', 'tree', null, 'true', 'false', null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: true,
        isArray: false,
      },
      {
        name: 'disabled',
        description: 'Disables the button. No events will be triggered while disabled state is active.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'hideLabel',
        description: 'Show or hide label. For better accessibility it is recommended to show the label.',
        type: 'BreakpointCustomizable<boolean>',
        defaultValue: 'false',
        allowedValues: [null, null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'icon',
        description: "The icon shown. By choosing 'none', no icon is displayed.",
        type: 'ButtonIcon',
        defaultValue: "'none'",
        allowedValues: [
          'close',
          'copy',
          'pause',
          'play',
          'reset',
          'sort',
          'map',
          'filter',
          'search',
          'video',
          'image',
          'switch',
          'view',
          'none',
          'success',
          'list',
          'grid',
          'document',
          'key',
          'light',
          'add',
          'screen',
          'zoom-in',
          'zoom-out',
          'weight',
          'subtract',
          '360',
          'accessibility',
          'active-cabin-ventilation',
          'adjust',
          'arrow-double-down',
          'arrow-double-left',
          'arrow-double-right',
          'arrow-double-up',
          'arrow-down',
          'arrow-first',
          'arrow-head-down',
          'arrow-head-left',
          'arrow-head-right',
          'arrow-head-up',
          'arrow-last',
          'arrow-left',
          'arrow-right',
          'arrow-up',
          'augmented-reality',
          'battery-empty',
          'battery-empty-co2',
          'battery-empty-fuel',
          'battery-full',
          'bell',
          'bookmark',
          'bookmark-filled',
          'broadcast',
          'calculator',
          'calendar',
          'camera',
          'car',
          'car-battery',
          'card',
          'charging-active',
          'charging-state',
          'charging-station',
          'chart',
          'chat',
          'check',
          'city',
          'climate',
          'climate-control',
          'clock',
          'closed-caption',
          'co2-class',
          'co2-emission',
          'compare',
          'configurate',
          'country-road',
          'cubic-capacity',
          'delete',
          'disable',
          'download',
          'duration',
          'edit',
          'email',
          'error-filled',
          'exclamation',
          'external',
          'fingerprint',
          'flash',
          'fuel-station',
          'garage',
          'gift',
          'globe',
          'heart',
          'heart-filled',
          'highway',
          'home',
          'horn',
          'increase',
          'information',
          'information-filled',
          'leaf',
          'leather',
          'locate',
          'lock',
          'lock-open',
          'logo-apple-podcast',
          'logo-baidu',
          'logo-delicious',
          'logo-digg',
          'logo-facebook',
          'logo-foursquare',
          'logo-gmail',
          'logo-google',
          'logo-hatena',
          'logo-instagram',
          'logo-kaixin',
          'logo-kakaotalk',
          'logo-linkedin',
          'logo-naver',
          'logo-pinterest',
          'logo-qq',
          'logo-qq-share',
          'logo-reddit',
          'logo-skyrock',
          'logo-sohu',
          'logo-spotify',
          'logo-tecent',
          'logo-telegram',
          'logo-tiktok',
          'logo-tumblr',
          'logo-twitter',
          'logo-viber',
          'logo-vk',
          'logo-wechat',
          'logo-weibo',
          'logo-whatsapp',
          'logo-x',
          'logo-xing',
          'logo-yahoo',
          'logo-youku',
          'logo-youtube',
          'logout',
          'menu-dots-horizontal',
          'menu-dots-vertical',
          'menu-lines',
          'minus',
          'mobile',
          'moon',
          'oil-can',
          'parking-brake',
          'parking-light',
          'phone',
          'pin',
          'pin-filled',
          'plug',
          'plus',
          'preheating',
          'printer',
          'purchase',
          'push-pin',
          'push-pin-off',
          'qr',
          'question',
          'racing-flag',
          'refresh',
          'replay',
          'roof-closed',
          'roof-open',
          'route',
          'rss',
          'save',
          'send',
          'share',
          'shopping-bag',
          'shopping-bag-filled',
          'shopping-cart',
          'shopping-cart-filled',
          'sidelights',
          'snowflake',
          'stack',
          'star',
          'star-filled',
          'steering-wheel',
          'stopwatch',
          'success-filled',
          'sun',
          'tablet',
          'tachometer',
          'tire',
          'truck',
          'upload',
          'user',
          'user-filled',
          'user-group',
          'user-manual',
          'view-off',
          'volume-off',
          'volume-up',
          'warning',
          'warning-filled',
          'wifi',
          'work',
          'wrench',
          'wrenches',
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'iconSource',
        description: 'A URL path to a custom icon.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'loading',
        description:
          'Disables the button and shows a loading indicator. No events will be triggered while loading state is active.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'name',
        description:
          "The name of the button, submitted as a pair with the button's value as part of the form data, when that button is used to submit the form.",
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the button color depending on the theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'type',
        description: 'Specifies the type of the button.',
        type: 'ButtonType',
        defaultValue: "'submit'",
        allowedValues: ['button', 'reset', 'submit'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'value',
        description:
          "Defines the value associated with the button's name when it's submitted with the form data. This value is passed to the server in params when the form is submitted using this button.",
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'variant',
        description: 'The style variant of the button.',
        type: 'ButtonVariant',
        defaultValue: "'primary'",
        allowedValues: ['primary', 'secondary', 'tertiary'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-button-group',
    props: [
      {
        name: 'direction',
        description:
          "Defines the direction of the main and cross axis. The default is ’{base: ‘column’, xs: ‘row’}' showing buttons vertically stacked on mobile viewports and side-by-side in a horizontal row from breakpoint ‘xs’. You always need to provide a base value when using breakpoints.",
        type: 'BreakpointCustomizable<ButtonGroupDirection>',
        defaultValue: "{ base: 'column', xs: 'row' }",
        allowedValues: [
          null,
          null,
          'column"; s?: "row',
          'column"; xs?: "row',
          'column"; m?: "row',
          'column"; l?: "row',
          'column"; xl?: "row',
          'column"; xxl?: "row',
          'column"; } & { base: "row',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-button-pure',
    props: [
      {
        name: 'active',
        description: 'Display button in active state.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'alignLabel',
        description: 'Aligns the label.',
        type: 'BreakpointCustomizable<ButtonPureAlignLabel>',
        defaultValue: "'end'",
        allowedValues: [
          null,
          null,
          'right',
          'end',
          'start"; s?: "left',
          'right',
          'end',
          'start"; xs?: "left',
          'right',
          'end',
          'start"; m?: "left',
          'right',
          'end',
          'start"; l?: "left',
          'right',
          'end',
          'start"; xl?: "left',
          'right',
          'end',
          'start"; xxl?: "left',
          'right',
          'end',
          'start"; } & { base: "left',
          'right',
          'end',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'aria',
        description: 'Add ARIA attributes.',
        type: 'SelectedAriaAttributes<ButtonPureAriaAttribute>',
        allowedValues: [null, null, 'dialog', 'menu', 'true', 'false', 'listbox', 'tree', null, 'true', 'false', null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: true,
        isArray: false,
      },
      {
        name: 'disabled',
        description: 'Disables the button. No events will be triggered while disabled state is active.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'hideLabel',
        description: 'Show or hide label. For better accessibility it is recommended to show the label.',
        type: 'BreakpointCustomizable<boolean>',
        defaultValue: 'false',
        allowedValues: [null, null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'icon',
        description: 'The icon shown.',
        type: 'ButtonPureIcon',
        defaultValue: "'arrow-right'",
        allowedValues: [
          'close',
          'copy',
          'pause',
          'play',
          'reset',
          'sort',
          'map',
          'filter',
          'search',
          'video',
          'image',
          'switch',
          'view',
          'none',
          'success',
          'list',
          'grid',
          'document',
          'key',
          'light',
          'add',
          'screen',
          'zoom-in',
          'zoom-out',
          'weight',
          'subtract',
          '360',
          'accessibility',
          'active-cabin-ventilation',
          'adjust',
          'arrow-double-down',
          'arrow-double-left',
          'arrow-double-right',
          'arrow-double-up',
          'arrow-down',
          'arrow-first',
          'arrow-head-down',
          'arrow-head-left',
          'arrow-head-right',
          'arrow-head-up',
          'arrow-last',
          'arrow-left',
          'arrow-right',
          'arrow-up',
          'augmented-reality',
          'battery-empty',
          'battery-empty-co2',
          'battery-empty-fuel',
          'battery-full',
          'bell',
          'bookmark',
          'bookmark-filled',
          'broadcast',
          'calculator',
          'calendar',
          'camera',
          'car',
          'car-battery',
          'card',
          'charging-active',
          'charging-state',
          'charging-station',
          'chart',
          'chat',
          'check',
          'city',
          'climate',
          'climate-control',
          'clock',
          'closed-caption',
          'co2-class',
          'co2-emission',
          'compare',
          'configurate',
          'country-road',
          'cubic-capacity',
          'delete',
          'disable',
          'download',
          'duration',
          'edit',
          'email',
          'error-filled',
          'exclamation',
          'external',
          'fingerprint',
          'flash',
          'fuel-station',
          'garage',
          'gift',
          'globe',
          'heart',
          'heart-filled',
          'highway',
          'home',
          'horn',
          'increase',
          'information',
          'information-filled',
          'leaf',
          'leather',
          'locate',
          'lock',
          'lock-open',
          'logo-apple-podcast',
          'logo-baidu',
          'logo-delicious',
          'logo-digg',
          'logo-facebook',
          'logo-foursquare',
          'logo-gmail',
          'logo-google',
          'logo-hatena',
          'logo-instagram',
          'logo-kaixin',
          'logo-kakaotalk',
          'logo-linkedin',
          'logo-naver',
          'logo-pinterest',
          'logo-qq',
          'logo-qq-share',
          'logo-reddit',
          'logo-skyrock',
          'logo-sohu',
          'logo-spotify',
          'logo-tecent',
          'logo-telegram',
          'logo-tiktok',
          'logo-tumblr',
          'logo-twitter',
          'logo-viber',
          'logo-vk',
          'logo-wechat',
          'logo-weibo',
          'logo-whatsapp',
          'logo-x',
          'logo-xing',
          'logo-yahoo',
          'logo-youku',
          'logo-youtube',
          'logout',
          'menu-dots-horizontal',
          'menu-dots-vertical',
          'menu-lines',
          'minus',
          'mobile',
          'moon',
          'oil-can',
          'parking-brake',
          'parking-light',
          'phone',
          'pin',
          'pin-filled',
          'plug',
          'plus',
          'preheating',
          'printer',
          'purchase',
          'push-pin',
          'push-pin-off',
          'qr',
          'question',
          'racing-flag',
          'refresh',
          'replay',
          'roof-closed',
          'roof-open',
          'route',
          'rss',
          'save',
          'send',
          'share',
          'shopping-bag',
          'shopping-bag-filled',
          'shopping-cart',
          'shopping-cart-filled',
          'sidelights',
          'snowflake',
          'stack',
          'star',
          'star-filled',
          'steering-wheel',
          'stopwatch',
          'success-filled',
          'sun',
          'tablet',
          'tachometer',
          'tire',
          'truck',
          'upload',
          'user',
          'user-filled',
          'user-group',
          'user-manual',
          'view-off',
          'volume-off',
          'volume-up',
          'warning',
          'warning-filled',
          'wifi',
          'work',
          'wrench',
          'wrenches',
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'iconSource',
        description: 'A URL path to a custom icon.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'loading',
        description:
          'Disables the button and shows a loading indicator. No events will be triggered while loading state is active.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'name',
        description:
          "The name of the button, submitted as a pair with the button's value as part of the form data, when that button is used to submit the form.",
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'size',
        description: 'Size of the button.',
        type: 'BreakpointCustomizable<ButtonPureSize>',
        defaultValue: "'small'",
        allowedValues: [
          null,
          null,
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; s?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; xs?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; m?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; l?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; xl?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; xxl?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; } & { base: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'stretch',
        description: 'Stretches the area between icon and label to max available space.',
        type: 'BreakpointCustomizable<boolean>',
        defaultValue: 'false',
        allowedValues: [null, null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the button color depending on the theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'type',
        description: 'Specifies the type of the button.',
        type: 'ButtonPureType',
        defaultValue: "'submit'",
        allowedValues: ['button', 'reset', 'submit'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'underline',
        description: 'Shows an underline under the label.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'value',
        description:
          "Defines the value associated with the button's name when it's submitted with the form data. This value is passed to the server in params when the form is submitted using this button.",
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'weight',
        description: 'The weight of the text (only has effect with visible label).',
        type: 'ButtonPureWeight',
        defaultValue: "'regular'",
        allowedValues: ['bold', 'regular', 'semi-bold', 'semibold', 'thin'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-button-tile',
    props: [
      {
        name: 'align',
        description: 'Alignment of button and description.',
        type: 'ButtonTileAlign',
        defaultValue: "'bottom'",
        allowedValues: ['bottom', 'top'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'aria',
        description: 'Add ARIA attributes.',
        type: 'SelectedAriaAttributes<ButtonTileAriaAttribute>',
        allowedValues: [null, null, 'dialog', 'menu', 'true', 'false', 'listbox', 'tree', null, 'true', 'false', null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: true,
        isArray: false,
      },
      {
        name: 'aspectRatio',
        description: 'Aspect ratio of the button-tile.',
        type: 'BreakpointCustomizable<ButtonTileAspectRatio>',
        defaultValue: "'4:3'",
        allowedValues: [
          null,
          null,
          '4:3',
          '3:4',
          '16:9',
          '9:16"; s?: "1:1',
          '4:3',
          '3:4',
          '16:9',
          '9:16"; xs?: "1:1',
          '4:3',
          '3:4',
          '16:9',
          '9:16"; m?: "1:1',
          '4:3',
          '3:4',
          '16:9',
          '9:16"; l?: "1:1',
          '4:3',
          '3:4',
          '16:9',
          '9:16"; xl?: "1:1',
          '4:3',
          '3:4',
          '16:9',
          '9:16"; xxl?: "1:1',
          '4:3',
          '3:4',
          '16:9',
          '9:16"; } & { base: "1:1',
          '4:3',
          '3:4',
          '16:9',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'background',
        description: 'Adapts the description and button theme when used on light background image.',
        type: 'ButtonTileBackground',
        defaultValue: "'dark'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'compact',
        description: 'Displays the button-tile as compact version with description and button icon only.',
        type: 'BreakpointCustomizable<boolean>',
        defaultValue: 'false',
        allowedValues: [null, null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'description',
        description: 'Description text.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'disabled',
        description: 'Disables the button. No events will be triggered while disabled state is active.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'gradient',
        description: 'Show gradient.',
        type: 'boolean',
        defaultValue: 'true',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'icon',
        description: "The icon shown. By choosing 'none', no icon is displayed.",
        type: 'ButtonTileIcon',
        defaultValue: "'none'",
        allowedValues: [
          'close',
          'copy',
          'pause',
          'play',
          'reset',
          'sort',
          'map',
          'filter',
          'search',
          'video',
          'image',
          'switch',
          'view',
          'none',
          'success',
          'list',
          'grid',
          'document',
          'key',
          'light',
          'add',
          'screen',
          'zoom-in',
          'zoom-out',
          'weight',
          'subtract',
          '360',
          'accessibility',
          'active-cabin-ventilation',
          'adjust',
          'arrow-double-down',
          'arrow-double-left',
          'arrow-double-right',
          'arrow-double-up',
          'arrow-down',
          'arrow-first',
          'arrow-head-down',
          'arrow-head-left',
          'arrow-head-right',
          'arrow-head-up',
          'arrow-last',
          'arrow-left',
          'arrow-right',
          'arrow-up',
          'augmented-reality',
          'battery-empty',
          'battery-empty-co2',
          'battery-empty-fuel',
          'battery-full',
          'bell',
          'bookmark',
          'bookmark-filled',
          'broadcast',
          'calculator',
          'calendar',
          'camera',
          'car',
          'car-battery',
          'card',
          'charging-active',
          'charging-state',
          'charging-station',
          'chart',
          'chat',
          'check',
          'city',
          'climate',
          'climate-control',
          'clock',
          'closed-caption',
          'co2-class',
          'co2-emission',
          'compare',
          'configurate',
          'country-road',
          'cubic-capacity',
          'delete',
          'disable',
          'download',
          'duration',
          'edit',
          'email',
          'error-filled',
          'exclamation',
          'external',
          'fingerprint',
          'flash',
          'fuel-station',
          'garage',
          'gift',
          'globe',
          'heart',
          'heart-filled',
          'highway',
          'home',
          'horn',
          'increase',
          'information',
          'information-filled',
          'leaf',
          'leather',
          'locate',
          'lock',
          'lock-open',
          'logo-apple-podcast',
          'logo-baidu',
          'logo-delicious',
          'logo-digg',
          'logo-facebook',
          'logo-foursquare',
          'logo-gmail',
          'logo-google',
          'logo-hatena',
          'logo-instagram',
          'logo-kaixin',
          'logo-kakaotalk',
          'logo-linkedin',
          'logo-naver',
          'logo-pinterest',
          'logo-qq',
          'logo-qq-share',
          'logo-reddit',
          'logo-skyrock',
          'logo-sohu',
          'logo-spotify',
          'logo-tecent',
          'logo-telegram',
          'logo-tiktok',
          'logo-tumblr',
          'logo-twitter',
          'logo-viber',
          'logo-vk',
          'logo-wechat',
          'logo-weibo',
          'logo-whatsapp',
          'logo-x',
          'logo-xing',
          'logo-yahoo',
          'logo-youku',
          'logo-youtube',
          'logout',
          'menu-dots-horizontal',
          'menu-dots-vertical',
          'menu-lines',
          'minus',
          'mobile',
          'moon',
          'oil-can',
          'parking-brake',
          'parking-light',
          'phone',
          'pin',
          'pin-filled',
          'plug',
          'plus',
          'preheating',
          'printer',
          'purchase',
          'push-pin',
          'push-pin-off',
          'qr',
          'question',
          'racing-flag',
          'refresh',
          'replay',
          'roof-closed',
          'roof-open',
          'route',
          'rss',
          'save',
          'send',
          'share',
          'shopping-bag',
          'shopping-bag-filled',
          'shopping-cart',
          'shopping-cart-filled',
          'sidelights',
          'snowflake',
          'stack',
          'star',
          'star-filled',
          'steering-wheel',
          'stopwatch',
          'success-filled',
          'sun',
          'tablet',
          'tachometer',
          'tire',
          'truck',
          'upload',
          'user',
          'user-filled',
          'user-group',
          'user-manual',
          'view-off',
          'volume-off',
          'volume-up',
          'warning',
          'warning-filled',
          'wifi',
          'work',
          'wrench',
          'wrenches',
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'iconSource',
        description: 'A URL path to a custom icon.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'label',
        description: 'Label of the button.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'loading',
        description:
          'Disables the button-tile and shows a loading indicator. No events will be triggered while loading state is active.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'size',
        description: 'Font size of the description.',
        type: 'BreakpointCustomizable<ButtonTileSize>',
        defaultValue: "'default'",
        allowedValues: [
          null,
          null,
          'default"; s?: "inherit',
          'default"; xs?: "inherit',
          'default"; m?: "inherit',
          'default"; l?: "inherit',
          'default"; xl?: "inherit',
          'default"; xxl?: "inherit',
          'default"; } & { base: "inherit',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'type',
        description: 'Specifies the type of the button.',
        type: 'ButtonTileType',
        defaultValue: "'submit'",
        allowedValues: ['button', 'reset', 'submit'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'weight',
        description: 'Font weight of the description.',
        type: 'BreakpointCustomizable<ButtonTileWeight>',
        defaultValue: "'semi-bold'",
        allowedValues: [
          null,
          null,
          'semi-bold"; s?: "regular',
          'semi-bold"; xs?: "regular',
          'semi-bold"; m?: "regular',
          'semi-bold"; l?: "regular',
          'semi-bold"; xl?: "regular',
          'semi-bold"; xxl?: "regular',
          'semi-bold"; } & { base: "regular',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-canvas',
    props: [
      {
        name: 'sidebarEndOpen',
        description: 'Open Sidebar on the end side',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'sidebarEndWidth',
        description: 'Defines the width of the sidebar on the end side',
        type: 'CanvasSidebarEndWidth',
        defaultValue: "'medium'",
        allowedValues: ['large', 'medium'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'sidebarStartOpen',
        description: 'Open Sidebar on the start side',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'sidebarStartWidth',
        description: 'Defines the width of the sidebar on the start side',
        type: 'CanvasSidebarStartWidth',
        defaultValue: "'medium'",
        allowedValues: ['large', 'medium'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-carousel',
    props: [
      {
        name: 'activeSlideIndex',
        description: 'Defines which slide to be active (zero-based numbering).',
        type: 'number',
        defaultValue: '0',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'alignHeader',
        description: 'Alignment of heading and description',
        type: 'CarouselAlignHeader',
        defaultValue: "'start'",
        allowedValues: ['center', 'left', 'start'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'aria',
        description: 'Add ARIA attributes.',
        type: 'SelectedAriaAttributes<CarouselAriaAttribute>',
        allowedValues: [null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: true,
        isArray: false,
      },
      {
        name: 'description',
        description: 'Defines the description used in the carousel.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'disablePagination',
        description:
          'since v3.0.0, will be removed with next major release, use `pagination` instead.\nIf true, the carousel will not show pagination bullets at the bottom.',
        type: 'BreakpointCustomizable<boolean>',
        allowedValues: [null, null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'heading',
        description: 'Defines the heading used in the carousel.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'headingSize',
        description: 'Defines the heading size used in the carousel.',
        type: 'CarouselHeadingSize',
        defaultValue: "'x-large'",
        allowedValues: ['x-large', 'xx-large'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'intl',
        description:
          'Override the default wordings that are used for aria-labels on the next/prev buttons and pagination.',
        type: 'CarouselInternationalization',
        allowedValues: [null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'pagination',
        description: 'If false, the carousel will not show pagination bullets at the bottom.',
        type: 'BreakpointCustomizable<boolean>',
        defaultValue: 'true',
        allowedValues: [null, null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'rewind',
        description: 'Whether the slides should rewind from last to first slide and vice versa.',
        type: 'boolean',
        defaultValue: 'true',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'skipLinkTarget',
        description: 'Defines target of skip link (to skip carousel entries).',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'slidesPerPage',
        description:
          'Sets the amount of slides visible at the same time. Can be set to `auto` if you want to define different widths per slide via CSS.',
        type: "BreakpointCustomizable<number> | 'auto'",
        defaultValue: '1',
        allowedValues: [null, null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the color when used on dark background.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'width',
        description: 'Defines the outer spacings between the carousel and the left and right screen sides.',
        type: 'CarouselWidth',
        defaultValue: "'basic'",
        allowedValues: ['basic', 'extended'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'wrapContent',
        description: 'Has no effect anymore',
        type: 'boolean',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-checkbox-wrapper',
    props: [
      {
        name: 'hideLabel',
        description: "Show or hide label. For better accessibility it's recommended to show the label.",
        type: 'BreakpointCustomizable<boolean>',
        defaultValue: 'false',
        allowedValues: [null, null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'label',
        description: 'The label text.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'loading',
        description: 'Disables the checkbox and shows a loading indicator.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: true,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'message',
        description: 'The message styled depending on validation state.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'state',
        description: 'The validation state.',
        type: 'CheckboxWrapperState',
        defaultValue: "'none'",
        allowedValues: ['error', 'none', 'success'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the color depending on the theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-content-wrapper',
    props: [
      {
        name: 'backgroundColor',
        description: 'Has no effect anymore',
        type: 'ContentWrapperBackgroundColor',
        defaultValue: "'transparent'",
        allowedValues: ['default', 'transparent'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Has no effect anymore',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'width',
        description:
          'Defines the outer spacings between the content area and the left and right screen sides, as well as centering its content and setting a max-width.',
        type: 'ContentWrapperWidth',
        defaultValue: "'extended'",
        allowedValues: ['basic', 'extended', 'fluid', 'full', 'narrow'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-crest',
    props: [
      {
        name: 'aria',
        description: 'Add ARIA attributes.',
        type: 'SelectedAriaAttributes<CrestAriaAttribute>',
        allowedValues: [null, null, 'time', 'true', 'false', 'page', 'step', 'location', null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: true,
        isArray: false,
      },
      {
        name: 'href',
        description: 'When providing an url then the component will be rendered as `<a>`.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'target',
        description: 'Target attribute where the link should be opened.',
        type: 'CrestTarget',
        defaultValue: "'_self'",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-display',
    props: [
      {
        name: 'align',
        description: 'Text alignment of the component.',
        type: 'DisplayAlign',
        defaultValue: "'start'",
        allowedValues: ['center', 'end', 'left', 'right', 'start'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'color',
        description: 'Basic text color variations depending on theme property.',
        type: 'DisplayColor',
        defaultValue: "'primary'",
        allowedValues: ['inherit', 'primary'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'ellipsis',
        description: 'Adds an ellipsis to a single line of text if it overflows.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'size',
        description:
          'Size of the component. Also defines the size for specific breakpoints, like {base: "medium", l: "large"}. You always need to provide a base value when doing this.',
        type: 'BreakpointCustomizable<DisplaySize>',
        defaultValue: "'large'",
        allowedValues: [
          null,
          null,
          'inherit',
          'medium',
          'large"; s?: "small',
          'inherit',
          'medium',
          'large"; xs?: "small',
          'inherit',
          'medium',
          'large"; m?: "small',
          'inherit',
          'medium',
          'large"; l?: "small',
          'inherit',
          'medium',
          'large"; xl?: "small',
          'inherit',
          'medium',
          'large"; xxl?: "small',
          'inherit',
          'medium',
          'large"; } & { base: "small',
          'inherit',
          'medium',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'tag',
        description: 'Sets a heading tag, so it fits correctly within the outline of the page.',
        type: 'DisplayTag',
        allowedValues: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the text color depending on the theme. Has no effect when "inherit" is set as color prop.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-divider',
    props: [
      {
        name: 'color',
        description: 'Defines color depending on theme.',
        type: 'DividerColor',
        defaultValue: "'contrast-low'",
        allowedValues: [
          'contrast-high',
          'contrast-low',
          'contrast-medium',
          'neutral-contrast-high',
          'neutral-contrast-low',
          'neutral-contrast-medium',
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'direction',
        description: 'Defines direction.',
        type: 'BreakpointCustomizable<DividerDirection>',
        defaultValue: "'horizontal'",
        allowedValues: [
          null,
          null,
          'vertical"; s?: "horizontal',
          'vertical"; xs?: "horizontal',
          'vertical"; m?: "horizontal',
          'vertical"; l?: "horizontal',
          'vertical"; xl?: "horizontal',
          'vertical"; xxl?: "horizontal',
          'vertical"; } & { base: "horizontal',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'orientation',
        description:
          'since v3.0.0, will be removed with next major release, use `direction` instead.\nDefines orientation.',
        type: 'BreakpointCustomizable<DividerOrientation>',
        allowedValues: [
          null,
          null,
          'vertical"; s?: "horizontal',
          'vertical"; xs?: "horizontal',
          'vertical"; m?: "horizontal',
          'vertical"; l?: "horizontal',
          'vertical"; xl?: "horizontal',
          'vertical"; xxl?: "horizontal',
          'vertical"; } & { base: "horizontal',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts color depending on theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-fieldset',
    props: [
      {
        name: 'label',
        description: 'The label text.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'labelSize',
        description: 'The size of the label text.',
        type: 'FieldsetLabelSize',
        defaultValue: "'medium'",
        allowedValues: ['medium', 'small'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'message',
        description: 'The message styled depending on validation state.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'required',
        description: 'Marks the Fieldset as required.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'state',
        description: 'The validation state.',
        type: 'FieldsetState',
        defaultValue: "'none'",
        allowedValues: ['error', 'none', 'success'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts color depending on theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-fieldset-wrapper',
    props: [
      {
        name: 'label',
        description: 'The label text.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'labelSize',
        description: 'The size of the label text.',
        type: 'FieldsetWrapperLabelSize',
        defaultValue: "'medium'",
        allowedValues: ['medium', 'small'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'message',
        description: 'The message styled depending on validation state.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'required',
        description: 'Marks the Fieldset as required.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'state',
        description: 'The validation state.',
        type: 'FieldsetWrapperState',
        defaultValue: "'none'",
        allowedValues: ['error', 'none', 'success'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts color depending on theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-flex',
    props: [
      {
        name: 'alignContent',
        description:
          'This aligns a flex container\'s individual lines when there is extra space in the cross-axis, similar to how "justifyContent" aligns individual items along the main axis.',
        type: 'BreakpointCustomizable<FlexAlignContent>',
        defaultValue: "'stretch'",
        allowedValues: [
          null,
          null,
          'space-around',
          'space-between',
          'space-evenly',
          'stretch',
          'flex-end',
          'flex-start"; s?: "center',
          'space-around',
          'space-between',
          'space-evenly',
          'stretch',
          'flex-end',
          'flex-start"; xs?: "center',
          'space-around',
          'space-between',
          'space-evenly',
          'stretch',
          'flex-end',
          'flex-start"; m?: "center',
          'space-around',
          'space-between',
          'space-evenly',
          'stretch',
          'flex-end',
          'flex-start"; l?: "center',
          'space-around',
          'space-between',
          'space-evenly',
          'stretch',
          'flex-end',
          'flex-start"; xl?: "center',
          'space-around',
          'space-between',
          'space-evenly',
          'stretch',
          'flex-end',
          'flex-start"; xxl?: "center',
          'space-around',
          'space-between',
          'space-evenly',
          'stretch',
          'flex-end',
          'flex-start"; } & { base: "center',
          'space-around',
          'space-between',
          'space-evenly',
          'stretch',
          'flex-end',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'alignItems',
        description: 'Defines how the flex items are aligned along the cross axis.',
        type: 'BreakpointCustomizable<FlexAlignItems>',
        defaultValue: "'stretch'",
        allowedValues: [
          null,
          null,
          'stretch',
          'flex-end',
          'flex-start',
          'baseline"; s?: "center',
          'stretch',
          'flex-end',
          'flex-start',
          'baseline"; xs?: "center',
          'stretch',
          'flex-end',
          'flex-start',
          'baseline"; m?: "center',
          'stretch',
          'flex-end',
          'flex-start',
          'baseline"; l?: "center',
          'stretch',
          'flex-end',
          'flex-start',
          'baseline"; xl?: "center',
          'stretch',
          'flex-end',
          'flex-start',
          'baseline"; xxl?: "center',
          'stretch',
          'flex-end',
          'flex-start',
          'baseline"; } & { base: "center',
          'stretch',
          'flex-end',
          'flex-start',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'direction',
        description:
          'Defines the direction of the main and cross axis. The default "row" defines the main axis as horizontal left to right.',
        type: 'BreakpointCustomizable<FlexDirection>',
        defaultValue: "'row'",
        allowedValues: [
          null,
          null,
          'column',
          'column-reverse',
          'row-reverse"; s?: "row',
          'column',
          'column-reverse',
          'row-reverse"; xs?: "row',
          'column',
          'column-reverse',
          'row-reverse"; m?: "row',
          'column',
          'column-reverse',
          'row-reverse"; l?: "row',
          'column',
          'column-reverse',
          'row-reverse"; xl?: "row',
          'column',
          'column-reverse',
          'row-reverse"; xxl?: "row',
          'column',
          'column-reverse',
          'row-reverse"; } & { base: "row',
          'column',
          'column-reverse',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'inline',
        description: 'Defines the flex containers content flow if 2 or more containers are siblings of each other.',
        type: 'BreakpointCustomizable<FlexInline>',
        defaultValue: 'false',
        allowedValues: [null, null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'justifyContent',
        description: 'Defines how the flex items are aligned along the main axis.',
        type: 'BreakpointCustomizable<FlexJustifyContent>',
        defaultValue: "'flex-start'",
        allowedValues: [
          null,
          null,
          'space-around',
          'space-between',
          'space-evenly',
          'flex-end',
          'flex-start"; s?: "center',
          'space-around',
          'space-between',
          'space-evenly',
          'flex-end',
          'flex-start"; xs?: "center',
          'space-around',
          'space-between',
          'space-evenly',
          'flex-end',
          'flex-start"; m?: "center',
          'space-around',
          'space-between',
          'space-evenly',
          'flex-end',
          'flex-start"; l?: "center',
          'space-around',
          'space-between',
          'space-evenly',
          'flex-end',
          'flex-start"; xl?: "center',
          'space-around',
          'space-between',
          'space-evenly',
          'flex-end',
          'flex-start"; xxl?: "center',
          'space-around',
          'space-between',
          'space-evenly',
          'flex-end',
          'flex-start"; } & { base: "center',
          'space-around',
          'space-between',
          'space-evenly',
          'flex-end',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'wrap',
        description: 'Handles wrapping behaviour of elements.',
        type: 'BreakpointCustomizable<FlexWrap>',
        defaultValue: "'nowrap'",
        allowedValues: [
          null,
          null,
          'wrap',
          'wrap-reverse"; s?: "nowrap',
          'wrap',
          'wrap-reverse"; xs?: "nowrap',
          'wrap',
          'wrap-reverse"; m?: "nowrap',
          'wrap',
          'wrap-reverse"; l?: "nowrap',
          'wrap',
          'wrap-reverse"; xl?: "nowrap',
          'wrap',
          'wrap-reverse"; xxl?: "nowrap',
          'wrap',
          'wrap-reverse"; } & { base: "nowrap',
          'wrap',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-flex-item',
    props: [
      {
        name: 'alignSelf',
        description:
          'Defines how this flex item is aligned along the cross axis. This overwrites the cross axis alignment set by the container. Corresponds to the "alignSelf" css property.',
        type: 'BreakpointCustomizable<FlexItemAlignSelf>',
        defaultValue: "'auto'",
        allowedValues: [
          null,
          null,
          'auto',
          'stretch',
          'flex-end',
          'flex-start',
          'baseline"; s?: "center',
          'auto',
          'stretch',
          'flex-end',
          'flex-start',
          'baseline"; xs?: "center',
          'auto',
          'stretch',
          'flex-end',
          'flex-start',
          'baseline"; m?: "center',
          'auto',
          'stretch',
          'flex-end',
          'flex-start',
          'baseline"; l?: "center',
          'auto',
          'stretch',
          'flex-end',
          'flex-start',
          'baseline"; xl?: "center',
          'auto',
          'stretch',
          'flex-end',
          'flex-start',
          'baseline"; xxl?: "center',
          'auto',
          'stretch',
          'flex-end',
          'flex-start',
          'baseline"; } & { base: "center',
          'auto',
          'stretch',
          'flex-end',
          'flex-start',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'flex',
        description: 'The shorthand property for the combined definition of "shrink", "grow" and "basis"',
        type: 'BreakpointCustomizable<FlexItemFlex>',
        defaultValue: "'initial'",
        allowedValues: [
          null,
          null,
          'auto',
          'initial',
          'equal"; s?: "none',
          'auto',
          'initial',
          'equal"; xs?: "none',
          'auto',
          'initial',
          'equal"; m?: "none',
          'auto',
          'initial',
          'equal"; l?: "none',
          'auto',
          'initial',
          'equal"; xl?: "none',
          'auto',
          'initial',
          'equal"; xxl?: "none',
          'auto',
          'initial',
          'equal"; } & { base: "none',
          'auto',
          'initial',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'grow',
        description: 'The ability to allow/disallow the flex child to grow.',
        type: 'BreakpointCustomizable<FlexItemGrow>',
        defaultValue: '0',
        allowedValues: [
          '0',
          '1',
          null,
          null,
          '1; s?: 0',
          '1; xs?: 0',
          '1; m?: 0',
          '1; l?: 0',
          '1; xl?: 0',
          '1; xxl?: 0',
          '1; } & { base: 0',
          '1; }',
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'offset',
        description:
          'The offset of the column. You can also supply values for specific breakpoints, like {base: "none", l: "one-quarter"}. You always need to provide a base value when doing this.',
        type: 'BreakpointCustomizable<FlexItemOffset>',
        defaultValue: "'none'",
        allowedValues: [
          null,
          null,
          'one-quarter',
          'one-third',
          'half',
          'two-thirds',
          'three-quarters"; s?: "none',
          'one-quarter',
          'one-third',
          'half',
          'two-thirds',
          'three-quarters"; xs?: "none',
          'one-quarter',
          'one-third',
          'half',
          'two-thirds',
          'three-quarters"; m?: "none',
          'one-quarter',
          'one-third',
          'half',
          'two-thirds',
          'three-quarters"; l?: "none',
          'one-quarter',
          'one-third',
          'half',
          'two-thirds',
          'three-quarters"; xl?: "none',
          'one-quarter',
          'one-third',
          'half',
          'two-thirds',
          'three-quarters"; xxl?: "none',
          'one-quarter',
          'one-third',
          'half',
          'two-thirds',
          'three-quarters"; } & { base: "none',
          'one-quarter',
          'one-third',
          'half',
          'two-thirds',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'shrink',
        description: 'The ability to allow/disallow the flex child to shrink.',
        type: 'BreakpointCustomizable<FlexItemShrink>',
        defaultValue: '1',
        allowedValues: [
          '0',
          '1',
          null,
          null,
          '1; s?: 0',
          '1; xs?: 0',
          '1; m?: 0',
          '1; l?: 0',
          '1; xl?: 0',
          '1; xxl?: 0',
          '1; } & { base: 0',
          '1; }',
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'width',
        description:
          'The width of the flex item. You can also supply values for specific breakpoints, like {base: "full", l: "one-quarter"}. You always need to provide a base value when doing this.',
        type: 'BreakpointCustomizable<FlexItemWidth>',
        defaultValue: "'auto'",
        allowedValues: [
          null,
          null,
          'full',
          'one-quarter',
          'one-third',
          'half',
          'two-thirds',
          'three-quarters"; s?: "auto',
          'full',
          'one-quarter',
          'one-third',
          'half',
          'two-thirds',
          'three-quarters"; xs?: "auto',
          'full',
          'one-quarter',
          'one-third',
          'half',
          'two-thirds',
          'three-quarters"; m?: "auto',
          'full',
          'one-quarter',
          'one-third',
          'half',
          'two-thirds',
          'three-quarters"; l?: "auto',
          'full',
          'one-quarter',
          'one-third',
          'half',
          'two-thirds',
          'three-quarters"; xl?: "auto',
          'full',
          'one-quarter',
          'one-third',
          'half',
          'two-thirds',
          'three-quarters"; xxl?: "auto',
          'full',
          'one-quarter',
          'one-third',
          'half',
          'two-thirds',
          'three-quarters"; } & { base: "auto',
          'full',
          'one-quarter',
          'one-third',
          'half',
          'two-thirds',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-flyout',
    props: [
      {
        name: 'aria',
        description: 'Add ARIA attributes.',
        type: 'SelectedAriaAttributes<FlyoutAriaAttribute>',
        allowedValues: [null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: true,
        isArray: false,
      },
      {
        name: 'disableBackdropClick',
        description: 'If true, the flyout will not be closable via backdrop click.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'open',
        description: 'If true, the flyout is open.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'position',
        description: 'The position of the flyout',
        type: 'FlyoutPosition',
        defaultValue: "'end'",
        allowedValues: ['end', 'left', 'right', 'start'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the flyout color depending on the theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [
      { name: 'header', description: 'Renders a sticky header section above the content area' },
      { name: '', description: 'Default slot for the main content' },
      { name: 'footer', description: 'Shows a sticky footer section, flowing under the content area when scrollable' },
      {
        name: 'sub-footer',
        description:
          'Shows a sub-footer section to display additional information below the footer. This slot is ideal for less critical content, such as legal information or FAQs, which provides further details to the user. It appears when scrolling to the end of the flyout or when there is available space to accommodate the content',
      },
    ],
    controlledState: [{ prop: 'open', event: 'dismiss' }],
  },
  {
    tag: 'p-flyout-multilevel',
    props: [
      {
        name: 'activeIdentifier',
        description: 'Defines which flyout-multilevel-item to be visualized as opened.',
        type: 'string | undefined',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'aria',
        description: 'Add ARIA attributes.',
        type: 'SelectedAriaAttributes<FlyoutMultilevelAriaAttribute>',
        allowedValues: [null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: true,
        isArray: false,
      },
      {
        name: 'open',
        description: 'If true, the flyout-multilevel is visualized as opened.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the flyout-multilevel color depending on the theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-flyout-multilevel-item',
    props: [
      {
        name: 'identifier',
        description:
          'Unique identifier which controls if this item should be shown when the active-identifier on the flyout-multilevel is set to this value.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'label',
        description: 'Label of the item.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-grid',
    props: [
      {
        name: 'direction',
        description:
          'Defines the direction of the main and cross axis. The default "row" defines the main axis as horizontal left to right. Also defines the direction for specific breakpoints, like {base: "column", l: "row"}. You always need to provide a base value when doing this.',
        type: 'BreakpointCustomizable<GridDirection>',
        defaultValue: "'row'",
        allowedValues: [
          null,
          null,
          'column',
          'column-reverse',
          'row-reverse"; s?: "row',
          'column',
          'column-reverse',
          'row-reverse"; xs?: "row',
          'column',
          'column-reverse',
          'row-reverse"; m?: "row',
          'column',
          'column-reverse',
          'row-reverse"; l?: "row',
          'column',
          'column-reverse',
          'row-reverse"; xl?: "row',
          'column',
          'column-reverse',
          'row-reverse"; xxl?: "row',
          'column',
          'column-reverse',
          'row-reverse"; } & { base: "row',
          'column',
          'column-reverse',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'gutter',
        description: 'Has no effect anymore',
        type: 'BreakpointCustomizable<GridGutter>',
        defaultValue: '{ base: 16, s: 24, m: 36 }',
        allowedValues: [
          '16',
          '24',
          '36',
          null,
          null,
          '24',
          '36; s?: 16',
          '24',
          '36; xs?: 16',
          '24',
          '36; m?: 16',
          '24',
          '36; l?: 16',
          '24',
          '36; xl?: 16',
          '24',
          '36; xxl?: 16',
          '24',
          '36; } & { base: 16',
          '24',
          '36; }',
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'wrap',
        description: 'Handles wrapping behaviour of elements.',
        type: 'BreakpointCustomizable<GridWrap>',
        defaultValue: "'wrap'",
        allowedValues: [
          null,
          null,
          'wrap"; s?: "nowrap',
          'wrap"; xs?: "nowrap',
          'wrap"; m?: "nowrap',
          'wrap"; l?: "nowrap',
          'wrap"; xl?: "nowrap',
          'wrap"; xxl?: "nowrap',
          'wrap"; } & { base: "nowrap',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-grid-item',
    props: [
      {
        name: 'offset',
        description:
          'The offset of the column. Can be between 0 and 11. Also defines the offset of the column for specific breakpoints, like {base: 6, l: 3}. You always need to provide a base value when doing this.',
        type: 'BreakpointCustomizable<GridItemOffset>',
        defaultValue: '0',
        allowedValues: [
          '0',
          '1',
          '10',
          '11',
          '2',
          '3',
          '4',
          '5',
          '6',
          '7',
          '8',
          '9',
          null,
          null,
          '1',
          '2',
          '3',
          '4',
          '5',
          '6',
          '7',
          '8',
          '9',
          '10',
          '11; s?: 0',
          '1',
          '2',
          '3',
          '4',
          '5',
          '6',
          '7',
          '8',
          '9',
          '10',
          '11; xs?: 0',
          '1',
          '2',
          '3',
          '4',
          '5',
          '6',
          '7',
          '8',
          '9',
          '10',
          '11; m?: 0',
          '1',
          '2',
          '3',
          '4',
          '5',
          '6',
          '7',
          '8',
          '9',
          '10',
          '11; l?: 0',
          '1',
          '2',
          '3',
          '4',
          '5',
          '6',
          '7',
          '8',
          '9',
          '10',
          '11; xl?: 0',
          '1',
          '2',
          '3',
          '4',
          '5',
          '6',
          '7',
          '8',
          '9',
          '10',
          '11; xxl?: 0',
          '1',
          '2',
          '3',
          '4',
          '5',
          '6',
          '7',
          '8',
          '9',
          '10',
          '11; } & { base: 0',
          '1',
          '2',
          '3',
          '4',
          '5',
          '6',
          '7',
          '8',
          '9',
          '10',
          '11; }',
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'size',
        description:
          'The size of the column. Can be between 1 and 12. Also defines the size of the column for specific breakpoints, like {base: 6, l: 3}. You always need to provide a base value when doing this.',
        type: 'BreakpointCustomizable<GridItemSize>',
        defaultValue: '1',
        allowedValues: [
          '1',
          '10',
          '11',
          '12',
          '2',
          '3',
          '4',
          '5',
          '6',
          '7',
          '8',
          '9',
          null,
          null,
          '2',
          '3',
          '4',
          '5',
          '6',
          '7',
          '8',
          '9',
          '10',
          '11',
          '12; s?: 1',
          '2',
          '3',
          '4',
          '5',
          '6',
          '7',
          '8',
          '9',
          '10',
          '11',
          '12; xs?: 1',
          '2',
          '3',
          '4',
          '5',
          '6',
          '7',
          '8',
          '9',
          '10',
          '11',
          '12; m?: 1',
          '2',
          '3',
          '4',
          '5',
          '6',
          '7',
          '8',
          '9',
          '10',
          '11',
          '12; l?: 1',
          '2',
          '3',
          '4',
          '5',
          '6',
          '7',
          '8',
          '9',
          '10',
          '11',
          '12; xl?: 1',
          '2',
          '3',
          '4',
          '5',
          '6',
          '7',
          '8',
          '9',
          '10',
          '11',
          '12; xxl?: 1',
          '2',
          '3',
          '4',
          '5',
          '6',
          '7',
          '8',
          '9',
          '10',
          '11',
          '12; } & { base: 1',
          '2',
          '3',
          '4',
          '5',
          '6',
          '7',
          '8',
          '9',
          '10',
          '11',
          '12; }',
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-heading',
    props: [
      {
        name: 'align',
        description: 'Text alignment of the component.',
        type: 'HeadingAlign',
        defaultValue: "'start'",
        allowedValues: ['center', 'end', 'left', 'right', 'start'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'color',
        description: 'Basic text color variations depending on theme property.',
        type: 'HeadingColor',
        defaultValue: "'primary'",
        allowedValues: ['inherit', 'primary'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'ellipsis',
        description: 'Adds an ellipsis to a single line of text if it overflows.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'size',
        description:
          'Size of the component. Also defines the size for specific breakpoints, like {base: "small", l: "medium"}. You always need to provide a base value when doing this.',
        type: 'BreakpointCustomizable<HeadingSize>',
        defaultValue: "'xx-large'",
        allowedValues: [
          null,
          null,
          'inherit',
          'medium',
          'large',
          'x-large',
          'xx-large"; s?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'xx-large"; xs?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'xx-large"; m?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'xx-large"; l?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'xx-large"; xl?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'xx-large"; xxl?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'xx-large"; } & { base: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'tag',
        description: 'Sets a heading tag, so it fits correctly within the outline of the page.',
        type: 'HeadingTag',
        allowedValues: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the text color depending on the theme. Has no effect when "inherit" is set as color prop.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-headline',
    props: [
      {
        name: 'align',
        description: 'Text alignment of the component.',
        type: 'HeadlineAlign',
        defaultValue: "'start'",
        allowedValues: ['center', 'end', 'left', 'right', 'start'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'color',
        description: 'Basic text color variations depending on theme property.',
        type: 'HeadlineColor',
        defaultValue: "'primary'",
        allowedValues: ['default', 'inherit', 'primary'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'ellipsis',
        description: 'Adds an ellipsis to a single line of text if it overflows.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'tag',
        description: 'Sets a custom HTML tag depending on the usage of the headline component.',
        type: 'HeadlineTag',
        allowedValues: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the text color depending on the theme. Has no effect when "inherit" is set as color prop.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'variant',
        description: 'Predefined style of the headline.',
        type: 'HeadlineVariant',
        defaultValue: "'headline-1'",
        allowedValues: [
          null,
          null,
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; s?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; xs?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; m?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; l?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; xl?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; xxl?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; } & { base: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-icon',
    props: [
      {
        name: 'aria',
        description: 'Add ARIA attributes.',
        type: 'SelectedAriaAttributes<IconAriaAttribute>',
        allowedValues: [null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: true,
        isArray: false,
      },
      {
        name: 'color',
        description: 'Basic color variations depending on theme property.',
        type: 'IconColor',
        defaultValue: "'primary'",
        allowedValues: [
          'brand',
          'contrast-high',
          'contrast-low',
          'contrast-medium',
          'default',
          'inherit',
          'neutral-contrast-high',
          'neutral-contrast-low',
          'neutral-contrast-medium',
          'notification-error',
          'notification-info',
          'notification-neutral',
          'notification-success',
          'notification-warning',
          'primary',
          'state-disabled',
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'lazy',
        description:
          'Has no effect anymore (the component is now using the native `loading="lazy"` attribute by default)',
        type: 'boolean',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'name',
        description: 'Specifies which icon to use.',
        type: 'IconName',
        defaultValue: "'arrow-right'",
        allowedValues: [
          'close',
          'copy',
          'pause',
          'play',
          'reset',
          'sort',
          'map',
          'filter',
          'search',
          'video',
          'image',
          'switch',
          'view',
          'success',
          'list',
          'grid',
          'document',
          'key',
          'light',
          'add',
          'screen',
          'zoom-in',
          'zoom-out',
          'weight',
          'subtract',
          '360',
          'accessibility',
          'active-cabin-ventilation',
          'adjust',
          'arrow-double-down',
          'arrow-double-left',
          'arrow-double-right',
          'arrow-double-up',
          'arrow-down',
          'arrow-first',
          'arrow-head-down',
          'arrow-head-left',
          'arrow-head-right',
          'arrow-head-up',
          'arrow-last',
          'arrow-left',
          'arrow-right',
          'arrow-up',
          'augmented-reality',
          'battery-empty',
          'battery-empty-co2',
          'battery-empty-fuel',
          'battery-full',
          'bell',
          'bookmark',
          'bookmark-filled',
          'broadcast',
          'calculator',
          'calendar',
          'camera',
          'car',
          'car-battery',
          'card',
          'charging-active',
          'charging-state',
          'charging-station',
          'chart',
          'chat',
          'check',
          'city',
          'climate',
          'climate-control',
          'clock',
          'closed-caption',
          'co2-class',
          'co2-emission',
          'compare',
          'configurate',
          'country-road',
          'cubic-capacity',
          'delete',
          'disable',
          'download',
          'duration',
          'edit',
          'email',
          'error-filled',
          'exclamation',
          'external',
          'fingerprint',
          'flash',
          'fuel-station',
          'garage',
          'gift',
          'globe',
          'heart',
          'heart-filled',
          'highway',
          'home',
          'horn',
          'increase',
          'information',
          'information-filled',
          'leaf',
          'leather',
          'locate',
          'lock',
          'lock-open',
          'logo-apple-podcast',
          'logo-baidu',
          'logo-delicious',
          'logo-digg',
          'logo-facebook',
          'logo-foursquare',
          'logo-gmail',
          'logo-google',
          'logo-hatena',
          'logo-instagram',
          'logo-kaixin',
          'logo-kakaotalk',
          'logo-linkedin',
          'logo-naver',
          'logo-pinterest',
          'logo-qq',
          'logo-qq-share',
          'logo-reddit',
          'logo-skyrock',
          'logo-sohu',
          'logo-spotify',
          'logo-tecent',
          'logo-telegram',
          'logo-tiktok',
          'logo-tumblr',
          'logo-twitter',
          'logo-viber',
          'logo-vk',
          'logo-wechat',
          'logo-weibo',
          'logo-whatsapp',
          'logo-x',
          'logo-xing',
          'logo-yahoo',
          'logo-youku',
          'logo-youtube',
          'logout',
          'menu-dots-horizontal',
          'menu-dots-vertical',
          'menu-lines',
          'minus',
          'mobile',
          'moon',
          'oil-can',
          'parking-brake',
          'parking-light',
          'phone',
          'pin',
          'pin-filled',
          'plug',
          'plus',
          'preheating',
          'printer',
          'purchase',
          'push-pin',
          'push-pin-off',
          'qr',
          'question',
          'racing-flag',
          'refresh',
          'replay',
          'roof-closed',
          'roof-open',
          'route',
          'rss',
          'save',
          'send',
          'share',
          'shopping-bag',
          'shopping-bag-filled',
          'shopping-cart',
          'shopping-cart-filled',
          'sidelights',
          'snowflake',
          'stack',
          'star',
          'star-filled',
          'steering-wheel',
          'stopwatch',
          'success-filled',
          'sun',
          'tablet',
          'tachometer',
          'tire',
          'truck',
          'upload',
          'user',
          'user-filled',
          'user-group',
          'user-manual',
          'view-off',
          'volume-off',
          'volume-up',
          'warning',
          'warning-filled',
          'wifi',
          'work',
          'wrench',
          'wrenches',
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'size',
        description: 'The size of the icon.',
        type: 'IconSize',
        defaultValue: "'small'",
        allowedValues: ['inherit', 'large', 'medium', 'small', 'x-large', 'x-small', 'xx-small'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'source',
        description: 'Specifies a whole icon path which can be used for custom icons.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the color depending on the theme. Has no effect when "inherit" is set as color prop.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-inline-notification',
    props: [
      {
        name: 'actionIcon',
        description: 'Action icon of the inline-notification.',
        type: 'InlineNotificationActionIcon',
        defaultValue: "'arrow-right'",
        allowedValues: [
          'close',
          'copy',
          'pause',
          'play',
          'reset',
          'sort',
          'map',
          'filter',
          'search',
          'video',
          'image',
          'switch',
          'view',
          'success',
          'list',
          'grid',
          'document',
          'key',
          'light',
          'add',
          'screen',
          'zoom-in',
          'zoom-out',
          'weight',
          'subtract',
          '360',
          'accessibility',
          'active-cabin-ventilation',
          'adjust',
          'arrow-double-down',
          'arrow-double-left',
          'arrow-double-right',
          'arrow-double-up',
          'arrow-down',
          'arrow-first',
          'arrow-head-down',
          'arrow-head-left',
          'arrow-head-right',
          'arrow-head-up',
          'arrow-last',
          'arrow-left',
          'arrow-right',
          'arrow-up',
          'augmented-reality',
          'battery-empty',
          'battery-empty-co2',
          'battery-empty-fuel',
          'battery-full',
          'bell',
          'bookmark',
          'bookmark-filled',
          'broadcast',
          'calculator',
          'calendar',
          'camera',
          'car',
          'car-battery',
          'card',
          'charging-active',
          'charging-state',
          'charging-station',
          'chart',
          'chat',
          'check',
          'city',
          'climate',
          'climate-control',
          'clock',
          'closed-caption',
          'co2-class',
          'co2-emission',
          'compare',
          'configurate',
          'country-road',
          'cubic-capacity',
          'delete',
          'disable',
          'download',
          'duration',
          'edit',
          'email',
          'error-filled',
          'exclamation',
          'external',
          'fingerprint',
          'flash',
          'fuel-station',
          'garage',
          'gift',
          'globe',
          'heart',
          'heart-filled',
          'highway',
          'home',
          'horn',
          'increase',
          'information',
          'information-filled',
          'leaf',
          'leather',
          'locate',
          'lock',
          'lock-open',
          'logo-apple-podcast',
          'logo-baidu',
          'logo-delicious',
          'logo-digg',
          'logo-facebook',
          'logo-foursquare',
          'logo-gmail',
          'logo-google',
          'logo-hatena',
          'logo-instagram',
          'logo-kaixin',
          'logo-kakaotalk',
          'logo-linkedin',
          'logo-naver',
          'logo-pinterest',
          'logo-qq',
          'logo-qq-share',
          'logo-reddit',
          'logo-skyrock',
          'logo-sohu',
          'logo-spotify',
          'logo-tecent',
          'logo-telegram',
          'logo-tiktok',
          'logo-tumblr',
          'logo-twitter',
          'logo-viber',
          'logo-vk',
          'logo-wechat',
          'logo-weibo',
          'logo-whatsapp',
          'logo-x',
          'logo-xing',
          'logo-yahoo',
          'logo-youku',
          'logo-youtube',
          'logout',
          'menu-dots-horizontal',
          'menu-dots-vertical',
          'menu-lines',
          'minus',
          'mobile',
          'moon',
          'oil-can',
          'parking-brake',
          'parking-light',
          'phone',
          'pin',
          'pin-filled',
          'plug',
          'plus',
          'preheating',
          'printer',
          'purchase',
          'push-pin',
          'push-pin-off',
          'qr',
          'question',
          'racing-flag',
          'refresh',
          'replay',
          'roof-closed',
          'roof-open',
          'route',
          'rss',
          'save',
          'send',
          'share',
          'shopping-bag',
          'shopping-bag-filled',
          'shopping-cart',
          'shopping-cart-filled',
          'sidelights',
          'snowflake',
          'stack',
          'star',
          'star-filled',
          'steering-wheel',
          'stopwatch',
          'success-filled',
          'sun',
          'tablet',
          'tachometer',
          'tire',
          'truck',
          'upload',
          'user',
          'user-filled',
          'user-group',
          'user-manual',
          'view-off',
          'volume-off',
          'volume-up',
          'warning',
          'warning-filled',
          'wifi',
          'work',
          'wrench',
          'wrenches',
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'actionLabel',
        description: 'Action label of the inline-notification.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'actionLoading',
        description:
          'Disables the action button and shows a loading indicator. No events will be triggered while loading state is active.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'description',
        description: 'Description of the inline-notification.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'dismissButton',
        description: 'If false, the inline-notification will not have a dismiss button.',
        type: 'boolean',
        defaultValue: 'true',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'heading',
        description: 'Heading of the inline-notification.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'headingTag',
        description: 'Sets a heading tag, so it fits correctly within the outline of the page.',
        type: 'InlineNotificationHeadingTag',
        defaultValue: "'h5'",
        allowedValues: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'persistent',
        description:
          'since v3.0.0, will be removed with next major release, use `dismissButton` instead.\nDefines if the inline-notification can be closed/removed by the user.',
        type: 'boolean',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'state',
        description: 'State of the inline-notification.',
        type: 'InlineNotificationState',
        defaultValue: "'info'",
        allowedValues: ['error', 'info', 'neutral', 'success', 'warning'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the inline-notification color depending on the theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-link',
    props: [
      {
        name: 'aria',
        description: 'Add ARIA attributes.',
        type: 'SelectedAriaAttributes<LinkAriaAttribute>',
        allowedValues: [null, null, 'time', 'true', 'false', 'page', 'step', 'location', null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: true,
        isArray: false,
      },
      {
        name: 'download',
        description:
          'Special download attribute to open native browser download dialog if target url points to a downloadable file.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'hideLabel',
        description: 'Show or hide label. For better accessibility it is recommended to show the label.',
        type: 'BreakpointCustomizable<boolean>',
        defaultValue: 'false',
        allowedValues: [null, null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'href',
        description: 'When providing an url then the component will be rendered as `<a>`.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'icon',
        description: "The icon shown. By choosing 'none', no icon is displayed.",
        type: 'LinkIcon',
        defaultValue: "'none'",
        allowedValues: [
          'close',
          'copy',
          'pause',
          'play',
          'reset',
          'sort',
          'map',
          'filter',
          'search',
          'video',
          'image',
          'switch',
          'view',
          'none',
          'success',
          'list',
          'grid',
          'document',
          'key',
          'light',
          'add',
          'screen',
          'zoom-in',
          'zoom-out',
          'weight',
          'subtract',
          '360',
          'accessibility',
          'active-cabin-ventilation',
          'adjust',
          'arrow-double-down',
          'arrow-double-left',
          'arrow-double-right',
          'arrow-double-up',
          'arrow-down',
          'arrow-first',
          'arrow-head-down',
          'arrow-head-left',
          'arrow-head-right',
          'arrow-head-up',
          'arrow-last',
          'arrow-left',
          'arrow-right',
          'arrow-up',
          'augmented-reality',
          'battery-empty',
          'battery-empty-co2',
          'battery-empty-fuel',
          'battery-full',
          'bell',
          'bookmark',
          'bookmark-filled',
          'broadcast',
          'calculator',
          'calendar',
          'camera',
          'car',
          'car-battery',
          'card',
          'charging-active',
          'charging-state',
          'charging-station',
          'chart',
          'chat',
          'check',
          'city',
          'climate',
          'climate-control',
          'clock',
          'closed-caption',
          'co2-class',
          'co2-emission',
          'compare',
          'configurate',
          'country-road',
          'cubic-capacity',
          'delete',
          'disable',
          'download',
          'duration',
          'edit',
          'email',
          'error-filled',
          'exclamation',
          'external',
          'fingerprint',
          'flash',
          'fuel-station',
          'garage',
          'gift',
          'globe',
          'heart',
          'heart-filled',
          'highway',
          'home',
          'horn',
          'increase',
          'information',
          'information-filled',
          'leaf',
          'leather',
          'locate',
          'lock',
          'lock-open',
          'logo-apple-podcast',
          'logo-baidu',
          'logo-delicious',
          'logo-digg',
          'logo-facebook',
          'logo-foursquare',
          'logo-gmail',
          'logo-google',
          'logo-hatena',
          'logo-instagram',
          'logo-kaixin',
          'logo-kakaotalk',
          'logo-linkedin',
          'logo-naver',
          'logo-pinterest',
          'logo-qq',
          'logo-qq-share',
          'logo-reddit',
          'logo-skyrock',
          'logo-sohu',
          'logo-spotify',
          'logo-tecent',
          'logo-telegram',
          'logo-tiktok',
          'logo-tumblr',
          'logo-twitter',
          'logo-viber',
          'logo-vk',
          'logo-wechat',
          'logo-weibo',
          'logo-whatsapp',
          'logo-x',
          'logo-xing',
          'logo-yahoo',
          'logo-youku',
          'logo-youtube',
          'logout',
          'menu-dots-horizontal',
          'menu-dots-vertical',
          'menu-lines',
          'minus',
          'mobile',
          'moon',
          'oil-can',
          'parking-brake',
          'parking-light',
          'phone',
          'pin',
          'pin-filled',
          'plug',
          'plus',
          'preheating',
          'printer',
          'purchase',
          'push-pin',
          'push-pin-off',
          'qr',
          'question',
          'racing-flag',
          'refresh',
          'replay',
          'roof-closed',
          'roof-open',
          'route',
          'rss',
          'save',
          'send',
          'share',
          'shopping-bag',
          'shopping-bag-filled',
          'shopping-cart',
          'shopping-cart-filled',
          'sidelights',
          'snowflake',
          'stack',
          'star',
          'star-filled',
          'steering-wheel',
          'stopwatch',
          'success-filled',
          'sun',
          'tablet',
          'tachometer',
          'tire',
          'truck',
          'upload',
          'user',
          'user-filled',
          'user-group',
          'user-manual',
          'view-off',
          'volume-off',
          'volume-up',
          'warning',
          'warning-filled',
          'wifi',
          'work',
          'wrench',
          'wrenches',
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'iconSource',
        description: 'A URL path to a custom icon.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'rel',
        description: 'Specifies the relationship of the target object to the link object.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'target',
        description: 'Target attribute where the link should be opened.',
        type: 'LinkTarget',
        defaultValue: "'_self'",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the link color when used on dark background.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'variant',
        description: 'The style variant of the link.',
        type: 'LinkVariant',
        defaultValue: "'primary'",
        allowedValues: ['primary', 'secondary', 'tertiary'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-link-pure',
    props: [
      {
        name: 'active',
        description: 'Display link in active state.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'alignLabel',
        description: 'Aligns the label.',
        type: 'BreakpointCustomizable<LinkPureAlignLabel>',
        defaultValue: "'end'",
        allowedValues: [
          null,
          null,
          'right',
          'end',
          'start"; s?: "left',
          'right',
          'end',
          'start"; xs?: "left',
          'right',
          'end',
          'start"; m?: "left',
          'right',
          'end',
          'start"; l?: "left',
          'right',
          'end',
          'start"; xl?: "left',
          'right',
          'end',
          'start"; xxl?: "left',
          'right',
          'end',
          'start"; } & { base: "left',
          'right',
          'end',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'aria',
        description: 'Add ARIA attributes.',
        type: 'SelectedAriaAttributes<LinkPureAriaAttribute>',
        allowedValues: [null, null, 'time', 'true', 'false', 'page', 'step', 'location', null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: true,
        isArray: false,
      },
      {
        name: 'download',
        description:
          'Special download attribute to open native browser download dialog if target url points to a downloadable file.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'hideLabel',
        description: 'Show or hide label. For better accessibility it is recommended to show the label.',
        type: 'BreakpointCustomizable<boolean>',
        defaultValue: 'false',
        allowedValues: [null, null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'href',
        description: 'When providing an url then the component will be rendered as `<a>`.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'icon',
        description: "The icon shown. By choosing 'none', no icon is displayed",
        type: 'LinkPureIcon',
        defaultValue: "'arrow-right'",
        allowedValues: [
          'close',
          'copy',
          'pause',
          'play',
          'reset',
          'sort',
          'map',
          'filter',
          'search',
          'video',
          'image',
          'switch',
          'view',
          'none',
          'success',
          'list',
          'grid',
          'document',
          'key',
          'light',
          'add',
          'screen',
          'zoom-in',
          'zoom-out',
          'weight',
          'subtract',
          '360',
          'accessibility',
          'active-cabin-ventilation',
          'adjust',
          'arrow-double-down',
          'arrow-double-left',
          'arrow-double-right',
          'arrow-double-up',
          'arrow-down',
          'arrow-first',
          'arrow-head-down',
          'arrow-head-left',
          'arrow-head-right',
          'arrow-head-up',
          'arrow-last',
          'arrow-left',
          'arrow-right',
          'arrow-up',
          'augmented-reality',
          'battery-empty',
          'battery-empty-co2',
          'battery-empty-fuel',
          'battery-full',
          'bell',
          'bookmark',
          'bookmark-filled',
          'broadcast',
          'calculator',
          'calendar',
          'camera',
          'car',
          'car-battery',
          'card',
          'charging-active',
          'charging-state',
          'charging-station',
          'chart',
          'chat',
          'check',
          'city',
          'climate',
          'climate-control',
          'clock',
          'closed-caption',
          'co2-class',
          'co2-emission',
          'compare',
          'configurate',
          'country-road',
          'cubic-capacity',
          'delete',
          'disable',
          'download',
          'duration',
          'edit',
          'email',
          'error-filled',
          'exclamation',
          'external',
          'fingerprint',
          'flash',
          'fuel-station',
          'garage',
          'gift',
          'globe',
          'heart',
          'heart-filled',
          'highway',
          'home',
          'horn',
          'increase',
          'information',
          'information-filled',
          'leaf',
          'leather',
          'locate',
          'lock',
          'lock-open',
          'logo-apple-podcast',
          'logo-baidu',
          'logo-delicious',
          'logo-digg',
          'logo-facebook',
          'logo-foursquare',
          'logo-gmail',
          'logo-google',
          'logo-hatena',
          'logo-instagram',
          'logo-kaixin',
          'logo-kakaotalk',
          'logo-linkedin',
          'logo-naver',
          'logo-pinterest',
          'logo-qq',
          'logo-qq-share',
          'logo-reddit',
          'logo-skyrock',
          'logo-sohu',
          'logo-spotify',
          'logo-tecent',
          'logo-telegram',
          'logo-tiktok',
          'logo-tumblr',
          'logo-twitter',
          'logo-viber',
          'logo-vk',
          'logo-wechat',
          'logo-weibo',
          'logo-whatsapp',
          'logo-x',
          'logo-xing',
          'logo-yahoo',
          'logo-youku',
          'logo-youtube',
          'logout',
          'menu-dots-horizontal',
          'menu-dots-vertical',
          'menu-lines',
          'minus',
          'mobile',
          'moon',
          'oil-can',
          'parking-brake',
          'parking-light',
          'phone',
          'pin',
          'pin-filled',
          'plug',
          'plus',
          'preheating',
          'printer',
          'purchase',
          'push-pin',
          'push-pin-off',
          'qr',
          'question',
          'racing-flag',
          'refresh',
          'replay',
          'roof-closed',
          'roof-open',
          'route',
          'rss',
          'save',
          'send',
          'share',
          'shopping-bag',
          'shopping-bag-filled',
          'shopping-cart',
          'shopping-cart-filled',
          'sidelights',
          'snowflake',
          'stack',
          'star',
          'star-filled',
          'steering-wheel',
          'stopwatch',
          'success-filled',
          'sun',
          'tablet',
          'tachometer',
          'tire',
          'truck',
          'upload',
          'user',
          'user-filled',
          'user-group',
          'user-manual',
          'view-off',
          'volume-off',
          'volume-up',
          'warning',
          'warning-filled',
          'wifi',
          'work',
          'wrench',
          'wrenches',
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'iconSource',
        description: 'A URL path to a custom icon.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'rel',
        description: 'Specifies the relationship of the target object to the link object.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'size',
        description: 'Size of the link.',
        type: 'BreakpointCustomizable<LinkPureSize>',
        defaultValue: "'small'",
        allowedValues: [
          null,
          null,
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; s?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; xs?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; m?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; l?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; xl?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; xxl?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; } & { base: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'stretch',
        description: 'Stretches the area between icon and label to max available space.',
        type: 'BreakpointCustomizable<boolean>',
        defaultValue: 'false',
        allowedValues: [null, null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'target',
        description: 'Target attribute where the link should be opened.',
        type: 'LinkPureTarget',
        defaultValue: "'_self'",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the button color depending on the theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'underline',
        description: 'Shows an underline under the label.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'weight',
        description: 'The weight of the text (only has effect with visible label).',
        type: 'LinkPureWeight',
        defaultValue: "'regular'",
        allowedValues: ['bold', 'regular', 'semi-bold', 'semibold', 'thin'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-link-social',
    props: [
      {
        name: 'hideLabel',
        description: 'Show or hide label.',
        type: 'BreakpointCustomizable<boolean>',
        defaultValue: 'false',
        allowedValues: [null, null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'href',
        description: 'When providing an url then the component will be rendered as `<a>`.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'icon',
        description: 'The icon shown.',
        type: 'LinkSocialIcon',
        allowedValues: [
          'logo-baidu',
          'logo-delicious',
          'logo-digg',
          'logo-facebook',
          'logo-foursquare',
          'logo-gmail',
          'logo-google',
          'logo-hatena',
          'logo-instagram',
          'logo-kaixin',
          'logo-kakaotalk',
          'logo-linkedin',
          'logo-naver',
          'logo-pinterest',
          'logo-qq',
          'logo-qq-share',
          'logo-reddit',
          'logo-skyrock',
          'logo-sohu',
          'logo-tecent',
          'logo-telegram',
          'logo-tiktok',
          'logo-tumblr',
          'logo-twitter',
          'logo-viber',
          'logo-vk',
          'logo-wechat',
          'logo-weibo',
          'logo-whatsapp',
          'logo-xing',
          'logo-yahoo',
          'logo-youku',
          'logo-youtube',
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'iconSource',
        description: 'A URL path to a custom icon.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'rel',
        description: 'Specifies the relationship of the target object to the link object.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'target',
        description: 'Target attribute where the link should be opened.',
        type: 'LinkSocialTarget',
        defaultValue: "'_self'",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the link color when used on dark background.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-link-tile',
    props: [
      {
        name: 'align',
        description: 'Alignment of link and description.',
        type: 'LinkTileAlign',
        defaultValue: "'bottom'",
        allowedValues: ['bottom', 'top'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'aria',
        description: 'Add ARIA attributes.',
        type: 'SelectedAriaAttributes<LinkTileAriaAttribute>',
        allowedValues: [null, null, 'time', 'true', 'false', 'page', 'step', 'location', null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: true,
        isArray: false,
      },
      {
        name: 'aspectRatio',
        description: 'Aspect ratio of the link-tile.',
        type: 'BreakpointCustomizable<LinkTileAspectRatio>',
        defaultValue: "'4:3'",
        allowedValues: [
          null,
          null,
          '4:3',
          '3:4',
          '16:9',
          '9:16"; s?: "1:1',
          '4:3',
          '3:4',
          '16:9',
          '9:16"; xs?: "1:1',
          '4:3',
          '3:4',
          '16:9',
          '9:16"; m?: "1:1',
          '4:3',
          '3:4',
          '16:9',
          '9:16"; l?: "1:1',
          '4:3',
          '3:4',
          '16:9',
          '9:16"; xl?: "1:1',
          '4:3',
          '3:4',
          '16:9',
          '9:16"; xxl?: "1:1',
          '4:3',
          '3:4',
          '16:9',
          '9:16"; } & { base: "1:1',
          '4:3',
          '3:4',
          '16:9',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'background',
        description: 'Adapts the description and link theme when used on light background image.',
        type: 'LinkTileBackground',
        defaultValue: "'dark'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'compact',
        description: 'Displays the link-tile as compact version with description and link icon only.',
        type: 'BreakpointCustomizable<boolean>',
        defaultValue: 'false',
        allowedValues: [null, null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'description',
        description: 'Description text.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'download',
        description:
          'Special download attribute to open native browser download dialog if target url points to a downloadable file.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'gradient',
        description: 'Show gradient.',
        type: 'boolean',
        defaultValue: 'true',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'href',
        description: 'href of the `<a>`.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'label',
        description: 'Label of the <a />.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'rel',
        description: 'Specifies the relationship of the target object to the link object.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'size',
        description: 'Font size of the description.',
        type: 'BreakpointCustomizable<LinkTileSize>',
        defaultValue: "'default'",
        allowedValues: [
          null,
          null,
          'default"; s?: "inherit',
          'default"; xs?: "inherit',
          'default"; m?: "inherit',
          'default"; l?: "inherit',
          'default"; xl?: "inherit',
          'default"; xxl?: "inherit',
          'default"; } & { base: "inherit',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'target',
        description: 'Target attribute where the link should be opened.',
        type: 'LinkTileTarget',
        defaultValue: "'_self'",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'weight',
        description: 'Font weight of the description.',
        type: 'BreakpointCustomizable<LinkTileWeight>',
        defaultValue: "'semi-bold'",
        allowedValues: [
          null,
          null,
          'semi-bold',
          'semibold"; s?: "regular',
          'semi-bold',
          'semibold"; xs?: "regular',
          'semi-bold',
          'semibold"; m?: "regular',
          'semi-bold',
          'semibold"; l?: "regular',
          'semi-bold',
          'semibold"; xl?: "regular',
          'semi-bold',
          'semibold"; xxl?: "regular',
          'semi-bold',
          'semibold"; } & { base: "regular',
          'semi-bold',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-link-tile-model-signature',
    props: [
      {
        name: 'aspectRatio',
        description: 'Aspect ratio of the link-tile-model-signature.',
        type: 'BreakpointCustomizable<LinkTileModelSignatureAspectRatio>',
        defaultValue: "'3:4'",
        allowedValues: [
          null,
          null,
          '4:3',
          '3:4',
          '16:9',
          '9:16"; s?: "1:1',
          '4:3',
          '3:4',
          '16:9',
          '9:16"; xs?: "1:1',
          '4:3',
          '3:4',
          '16:9',
          '9:16"; m?: "1:1',
          '4:3',
          '3:4',
          '16:9',
          '9:16"; l?: "1:1',
          '4:3',
          '3:4',
          '16:9',
          '9:16"; xl?: "1:1',
          '4:3',
          '3:4',
          '16:9',
          '9:16"; xxl?: "1:1',
          '4:3',
          '3:4',
          '16:9',
          '9:16"; } & { base: "1:1',
          '4:3',
          '3:4',
          '16:9',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'description',
        description: 'Description text.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'heading',
        description: 'Heading text.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'headingTag',
        description: 'Sets a heading tag, so it fits correctly within the outline of the page.',
        type: 'LinkTileModelSignatureHeadingTag',
        defaultValue: "'h2'",
        allowedValues: ['h2', 'h3', 'h4', 'h5', 'h6'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'linkDirection',
        description:
          "Defines the direction of the main and cross axis of the links. The default is '{base: ‘column’, xs: ‘row’}' showing buttons vertically stacked on mobile viewports and side-by-side in a horizontal row from breakpoint 'xs'.",
        type: 'BreakpointCustomizable<LinkTileModelSignatureLinkDirection>',
        defaultValue: "{ base: 'column', xs: 'row' }",
        allowedValues: [
          null,
          null,
          'column"; s?: "row',
          'column"; xs?: "row',
          'column"; m?: "row',
          'column"; l?: "row',
          'column"; xl?: "row',
          'column"; xxl?: "row',
          'column"; } & { base: "row',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'model',
        description: 'Adapts the model of the component.',
        type: 'LinkTileModelSignatureModel',
        defaultValue: "'911'",
        allowedValues: [
          '718',
          '911',
          'boxster',
          'cayenne',
          'cayman',
          'macan',
          'panamera',
          'taycan',
          'turbo',
          'turbo-s',
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'weight',
        description: 'Adapts the font weight of the heading.',
        type: 'BreakpointCustomizable<LinkTileModelSignatureWeight>',
        defaultValue: "'semi-bold'",
        allowedValues: [
          null,
          null,
          'semi-bold"; s?: "regular',
          'semi-bold"; xs?: "regular',
          'semi-bold"; m?: "regular',
          'semi-bold"; l?: "regular',
          'semi-bold"; xl?: "regular',
          'semi-bold"; xxl?: "regular',
          'semi-bold"; } & { base: "regular',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-link-tile-product',
    props: [
      {
        name: 'aspectRatio',
        description: 'Aspect ratio of the link-tile-product.',
        type: 'BreakpointCustomizable<LinkTileProductAspectRatio>',
        defaultValue: "'3:4'",
        allowedValues: [null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'description',
        description: 'Additional product description.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'heading',
        description: 'Product heading.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'href',
        description: 'href of the `<a>`.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'likeButton',
        description: 'A Boolean attribute indicating that a like button should be shown.',
        type: 'boolean',
        defaultValue: 'true',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'liked',
        description: 'A Boolean attribute indicating that a product is liked.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'price',
        description: 'Product retail price (with or without discount).',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'priceOriginal',
        description:
          'Shows original price (recommended retail price) with line-through. Needs prop "price" to be defined, otherwise this prop has no effect.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'rel',
        description: 'Specifies the relationship of the target object to the link object.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'target',
        description: 'Target attribute where the link should be opened.',
        type: 'LinkTileProductTarget',
        defaultValue: "'_self'",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the link-tile-product color depending on the theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-marque',
    props: [
      {
        name: 'aria',
        description: 'Add ARIA attributes.',
        type: 'SelectedAriaAttributes<MarqueAriaAttribute>',
        allowedValues: [null, null, 'time', 'true', 'false', 'page', 'step', 'location', null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: true,
        isArray: false,
      },
      {
        name: 'href',
        description: 'When providing an url then the component will be rendered as `<a>`.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'size',
        description: 'Adapts sizing of marque.',
        type: 'MarqueSize',
        defaultValue: "'responsive'",
        allowedValues: ['medium', 'responsive', 'small'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'target',
        description: 'Target attribute where the link should be opened.',
        type: 'MarqueTarget',
        defaultValue: "'_self'",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'trademark',
        description: 'Show/hide trademark sign (only has effect when variant is set to default).',
        type: 'boolean',
        defaultValue: 'true',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'variant',
        description: 'Shows marque in special editions',
        type: 'MarqueVariant',
        defaultValue: "'default'",
        allowedValues: ['75-years', 'default'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-modal',
    props: [
      {
        name: 'aria',
        description: 'Add ARIA attributes.',
        type: 'SelectedAriaAttributes<ModalAriaAttribute>',
        allowedValues: [null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: true,
        isArray: false,
      },
      {
        name: 'backdrop',
        description:
          "Defines the backdrop, 'blur' (should be used when Modal is opened by user interaction, e.g. after a click on a button) and 'shading' (should be used when Modal gets opened automatically, e.g. Cookie Consent).",
        type: 'ModalBackdrop',
        defaultValue: "'blur'",
        allowedValues: ['blur', 'shading'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'disableBackdropClick',
        description: 'If true, the modal will not be closable via backdrop click.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'disableCloseButton',
        description: 'If true, the modal will not have a dismiss button.',
        type: 'boolean',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'dismissButton',
        description: 'If false, the modal will not have a dismiss button.',
        type: 'boolean',
        defaultValue: 'true',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'fullscreen',
        description: 'If true the modal uses max viewport height and width. Should only be used for mobile.',
        type: 'BreakpointCustomizable<boolean>',
        defaultValue: 'false',
        allowedValues: [null, null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'heading',
        description:
          'since v3.0.0, will be removed with next major release, use `header` slot instead\nThe title of the modal',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'open',
        description: 'If true, the modal is open.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the modal color depending on the theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-model-signature',
    props: [
      {
        name: 'color',
        description: 'Adapts the color of the component.',
        type: 'ModelSignatureColor',
        defaultValue: "'primary'",
        allowedValues: ['contrast-high', 'contrast-low', 'contrast-medium', 'inherit', 'primary'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'fetchPriority',
        description:
          'Defines the fetch priority of the model signature. In the end it is just a recommendation to the browser, but it defines the priority on its own.',
        type: 'ModelSignatureFetchPriority',
        defaultValue: "'auto'",
        allowedValues: ['auto', 'high', 'low'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'lazy',
        description:
          'Defines whether the model signature is always loaded or only loaded when it is in the viewport (this feature may not work reliably).',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'model',
        description: 'Adapts the model of the component.',
        type: 'ModelSignatureModel',
        defaultValue: "'911'",
        allowedValues: [
          '718',
          '911',
          'boxster',
          'cayenne',
          'cayman',
          'macan',
          'panamera',
          'taycan',
          'turbo',
          'turbo-s',
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'safeZone',
        description:
          'When set to `true`, then all model signatures are visually aligned with each other. When set to `false` the model signature comes without any safe zone.',
        type: 'boolean',
        defaultValue: 'true',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'size',
        description:
          'Adapts the size of the component. When set to `inherit` a CSS `width` or `height` needs to be defined on the host but not both.',
        type: 'ModelSignatureSize',
        defaultValue: "'small'",
        allowedValues: ['inherit', 'small'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts color depending on theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-multi-select',
    props: [
      {
        name: 'description',
        description: 'The description text.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'disabled',
        description: 'Disables the multi-select',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'dropdownDirection',
        description: 'Changes the direction to which the dropdown list appears.',
        type: 'MultiSelectDropdownDirection',
        defaultValue: "'auto'",
        allowedValues: ['auto', 'down', 'up'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'hideLabel',
        description: 'Show or hide label. For better accessibility it is recommended to show the label.',
        type: 'BreakpointCustomizable<boolean>',
        defaultValue: 'false',
        allowedValues: [null, null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'label',
        description: 'The label text.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'message',
        description: 'The message styled depending on validation state.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'name',
        description: 'The name of the control.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'required',
        description: 'A Boolean attribute indicating that an option with a non-empty string value must be selected.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'state',
        description: 'The validation state.',
        type: 'MultiSelectState',
        defaultValue: "'none'",
        allowedValues: ['error', 'none', 'success'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the select color depending on the theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'value',
        description: 'The selected values.',
        type: 'string[]',
        defaultValue: '[]',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: true,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-multi-select-option',
    props: [
      {
        name: 'disabled',
        description: 'Disables the option.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'value',
        description: 'The option value.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-pagination',
    props: [
      {
        name: 'activePage',
        description: 'Index of the currently active page.',
        type: 'number',
        defaultValue: '1',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'allyLabel',
        description:
          'since v3.0.0, will be removed with next major release, use `intl.root` instead.\nAria label what the pagination is used for.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'allyLabelNext',
        description:
          'since v3.0.0, will be removed with next major release, use `intl.next` instead.\nAria label for next page icon.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'allyLabelPage',
        description:
          'since v3.0.0, will be removed with next major release, use `intl.page` instead.\nAria label for page navigation.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'allyLabelPrev',
        description:
          'since v3.0.0, will be removed with next major release, use `intl.prev` instead.\nAria label for previous page icon.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'intl',
        description: 'Override the default wordings that are used for aria-labels on the next/prev and page buttons.',
        type: 'PaginationInternationalization',
        defaultValue:
          "{\n    root: 'Pagination',\n    prev: 'Previous page',\n    next: 'Next page',\n    page: 'Page',\n  }",
        allowedValues: [null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'itemsPerPage',
        description: 'The total count of items which should be shown per page.',
        type: 'number',
        defaultValue: '1',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'maxNumberOfPageLinks',
        description: 'Has no effect anymore',
        type: 'BreakpointCustomizable<PaginationMaxNumberOfPageLinks>',
        allowedValues: [
          '5',
          '7',
          null,
          null,
          '7; s?: 5',
          '7; xs?: 5',
          '7; m?: 5',
          '7; l?: 5',
          '7; xl?: 5',
          '7; xxl?: 5',
          '7; } & { base: 5',
          '7; }',
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'showLastPage',
        description: 'Show or hide the button to jump to the last page.',
        type: 'boolean',
        defaultValue: 'true',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the color when used on dark background.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'totalItemsCount',
        description: 'The total count of items.',
        type: 'number',
        defaultValue: '1',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-pin-code',
    props: [
      {
        name: 'description',
        description: 'The description text.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'disabled',
        description: 'Disables the Pin Code. No events will be triggered while disabled state is active.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'hideLabel',
        description:
          'Show or hide label and description text. For better accessibility it is recommended to show the label.',
        type: 'BreakpointCustomizable<boolean>',
        defaultValue: 'false',
        allowedValues: [null, null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'label',
        description: 'The label text.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'length',
        description: 'Number of characters of the Pin Code.',
        type: 'PinCodeLength',
        defaultValue: '4',
        allowedValues: ['1', '2', '3', '4', '5', '6'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'loading',
        description:
          'Disables the Pin Code and shows a loading indicator. No events will be triggered while loading state is active.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'message',
        description: 'The message styled depending on validation state.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'name',
        description: 'Name of the control.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'required',
        description: 'Marks the Pin Code as required.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'state',
        description: 'The validation state.',
        type: 'PinCodeState',
        defaultValue: "'none'",
        allowedValues: ['error', 'none', 'success'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the color depending on the theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'type',
        description: 'Pin Code type.',
        type: 'PinCodeType',
        defaultValue: "'number'",
        allowedValues: ['number', 'password'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'value',
        description: 'Sets the initial value of the Pin Code.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-popover',
    props: [
      {
        name: 'aria',
        description: 'Add ARIA attributes.',
        type: 'SelectedAriaAttributes<PopoverAriaAttribute>',
        allowedValues: [null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: true,
        isArray: false,
      },
      {
        name: 'description',
        description: 'Descriptive text to show additional information when popover is open',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'direction',
        description:
          'Preferred direction in which popover should open, given there is enough space in viewport.\nOtherwise, it will be opened in the direction with most available space.',
        type: 'PopoverDirection',
        defaultValue: "'bottom'",
        allowedValues: ['bottom', 'left', 'right', 'top'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the popover color depending on the theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-radio-button-wrapper',
    props: [
      {
        name: 'hideLabel',
        description: "Show or hide label. For better accessibility it's recommended to show the label.",
        type: 'BreakpointCustomizable<boolean>',
        defaultValue: 'false',
        allowedValues: [null, null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'label',
        description: 'The label text.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'loading',
        description: 'Disables the radio button and shows a loading indicator.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: true,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'message',
        description: 'The message styled depending on validation state.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'state',
        description: 'The validation state.',
        type: 'RadioButtonWrapperState',
        defaultValue: "'none'",
        allowedValues: ['error', 'none', 'success'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the color depending on the theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-scroller',
    props: [
      {
        name: 'alignScrollIndicator',
        description: 'Sets the vertical position of scroll indicator.',
        type: 'ScrollerAlignScrollIndicator',
        defaultValue: "'center'",
        allowedValues: ['center', 'top'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'aria',
        description: 'Add ARIA role.',
        type: 'SelectedAriaAttributes<ScrollerAriaAttribute>',
        allowedValues: [null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: true,
        isArray: false,
      },
      {
        name: 'gradientColor',
        description: 'Adapts the background gradient color of prev and next button.',
        type: 'ScrollerGradientColor',
        defaultValue: "'background-base'",
        allowedValues: ['background-base', 'background-surface'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'gradientColorScheme',
        description:
          'since v3.0.0, will be removed with next major release, use `gradientColor` instead.\nAdapts the background gradient color of prev and next button.',
        type: 'ScrollerGradientColorScheme',
        allowedValues: ['default', 'surface'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'scrollIndicatorPosition',
        description:
          'since v3.0.0, will be removed with next major release, use `alignScrollIndicator` instead.\nSets the vertical position of scroll indicator',
        type: 'ScrollerScrollIndicatorPosition',
        allowedValues: ['center', 'top'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'scrollToPosition',
        description: 'Scrolls the scroll area to the left either smooth or immediately.',
        type: 'ScrollerScrollToPosition',
        allowedValues: [null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'scrollbar',
        description: 'Specifies if scrollbar should be shown.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the color when used on dark background.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-segmented-control',
    props: [
      {
        name: 'backgroundColor',
        description: 'since v3.0.0, will be removed with next major release.\nBackground color variations',
        type: 'SegmentedControlBackgroundColor',
        allowedValues: ['background-default', 'background-surface'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'columns',
        description: 'Sets the amount of columns.',
        type: 'BreakpointCustomizable<SegmentedControlColumns>',
        defaultValue: "'auto'",
        allowedValues: [null, null, null, null, null, null, null, null, null, null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the segmented-control color depending on the theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'value',
        description: 'Sets the initial value of the segmented-control.',
        type: 'string | number',
        allowedValues: [null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-segmented-control-item',
    props: [
      {
        name: 'aria',
        description: 'Add ARIA attributes.',
        type: 'SelectedAriaAttributes<SegmentedControlItemAriaAttribute>',
        allowedValues: [null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: true,
        isArray: false,
      },
      {
        name: 'disabled',
        description: 'Disables the button. No events will be triggered while disabled state is active.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'icon',
        description: 'The icon shown.',
        type: 'SegmentedControlItemIcon',
        allowedValues: [
          'close',
          'copy',
          'pause',
          'play',
          'reset',
          'sort',
          'map',
          'filter',
          'search',
          'video',
          'image',
          'switch',
          'view',
          'none',
          'success',
          'list',
          'grid',
          'document',
          'key',
          'light',
          'add',
          'screen',
          'zoom-in',
          'zoom-out',
          'weight',
          'subtract',
          '360',
          'accessibility',
          'active-cabin-ventilation',
          'adjust',
          'arrow-double-down',
          'arrow-double-left',
          'arrow-double-right',
          'arrow-double-up',
          'arrow-down',
          'arrow-first',
          'arrow-head-down',
          'arrow-head-left',
          'arrow-head-right',
          'arrow-head-up',
          'arrow-last',
          'arrow-left',
          'arrow-right',
          'arrow-up',
          'augmented-reality',
          'battery-empty',
          'battery-empty-co2',
          'battery-empty-fuel',
          'battery-full',
          'bell',
          'bookmark',
          'bookmark-filled',
          'broadcast',
          'calculator',
          'calendar',
          'camera',
          'car',
          'car-battery',
          'card',
          'charging-active',
          'charging-state',
          'charging-station',
          'chart',
          'chat',
          'check',
          'city',
          'climate',
          'climate-control',
          'clock',
          'closed-caption',
          'co2-class',
          'co2-emission',
          'compare',
          'configurate',
          'country-road',
          'cubic-capacity',
          'delete',
          'disable',
          'download',
          'duration',
          'edit',
          'email',
          'error-filled',
          'exclamation',
          'external',
          'fingerprint',
          'flash',
          'fuel-station',
          'garage',
          'gift',
          'globe',
          'heart',
          'heart-filled',
          'highway',
          'home',
          'horn',
          'increase',
          'information',
          'information-filled',
          'leaf',
          'leather',
          'locate',
          'lock',
          'lock-open',
          'logo-apple-podcast',
          'logo-baidu',
          'logo-delicious',
          'logo-digg',
          'logo-facebook',
          'logo-foursquare',
          'logo-gmail',
          'logo-google',
          'logo-hatena',
          'logo-instagram',
          'logo-kaixin',
          'logo-kakaotalk',
          'logo-linkedin',
          'logo-naver',
          'logo-pinterest',
          'logo-qq',
          'logo-qq-share',
          'logo-reddit',
          'logo-skyrock',
          'logo-sohu',
          'logo-spotify',
          'logo-tecent',
          'logo-telegram',
          'logo-tiktok',
          'logo-tumblr',
          'logo-twitter',
          'logo-viber',
          'logo-vk',
          'logo-wechat',
          'logo-weibo',
          'logo-whatsapp',
          'logo-x',
          'logo-xing',
          'logo-yahoo',
          'logo-youku',
          'logo-youtube',
          'logout',
          'menu-dots-horizontal',
          'menu-dots-vertical',
          'menu-lines',
          'minus',
          'mobile',
          'moon',
          'oil-can',
          'parking-brake',
          'parking-light',
          'phone',
          'pin',
          'pin-filled',
          'plug',
          'plus',
          'preheating',
          'printer',
          'purchase',
          'push-pin',
          'push-pin-off',
          'qr',
          'question',
          'racing-flag',
          'refresh',
          'replay',
          'roof-closed',
          'roof-open',
          'route',
          'rss',
          'save',
          'send',
          'share',
          'shopping-bag',
          'shopping-bag-filled',
          'shopping-cart',
          'shopping-cart-filled',
          'sidelights',
          'snowflake',
          'stack',
          'star',
          'star-filled',
          'steering-wheel',
          'stopwatch',
          'success-filled',
          'sun',
          'tablet',
          'tachometer',
          'tire',
          'truck',
          'upload',
          'user',
          'user-filled',
          'user-group',
          'user-manual',
          'view-off',
          'volume-off',
          'volume-up',
          'warning',
          'warning-filled',
          'wifi',
          'work',
          'wrench',
          'wrenches',
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'iconSource',
        description: 'A URL path to a custom icon.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'label',
        description: 'The label text.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'value',
        description:
          'The value of this item which is emitted by the parent element if it becomes selected. This property is **required**.',
        type: 'string | number',
        allowedValues: [null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-select',
    props: [
      {
        name: 'description',
        description: 'The description text.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'disabled',
        description: 'Disables the select',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'dropdownDirection',
        description: 'Changes the direction to which the dropdown list appears.',
        type: 'SelectDropdownDirection',
        defaultValue: "'auto'",
        allowedValues: ['auto', 'down', 'up'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'hideLabel',
        description: 'Show or hide label. For better accessibility it is recommended to show the label.',
        type: 'BreakpointCustomizable<boolean>',
        defaultValue: 'false',
        allowedValues: [null, null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'label',
        description: 'The label text.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'message',
        description: 'The message styled depending on validation state.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'name',
        description: 'The name of the control.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'required',
        description: 'A Boolean attribute indicating that an option with a non-empty string value must be selected.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'state',
        description: 'The validation state.',
        type: 'SelectState',
        defaultValue: "'none'",
        allowedValues: ['error', 'none', 'success'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the select color depending on the theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'value',
        description: 'The selected value.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-select-option',
    props: [
      {
        name: 'disabled',
        description: 'Disables the option.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'value',
        description: 'The option value.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-select-wrapper',
    props: [
      {
        name: 'description',
        description: 'The description text.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'dropdownDirection',
        description: 'Changes the direction to which the dropdown list appears.',
        type: 'SelectWrapperDropdownDirection',
        defaultValue: "'auto'",
        allowedValues: ['auto', 'down', 'up'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'filter',
        description: 'Filters select options by typing a character',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'hideLabel',
        description: 'Show or hide label. For better accessibility it is recommended to show the label.',
        type: 'BreakpointCustomizable<boolean>',
        defaultValue: 'false',
        allowedValues: [null, null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'label',
        description: 'The label text.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'message',
        description: 'The message styled depending on validation state.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'native',
        description: 'Forces rendering of native browser select dropdown',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'state',
        description: 'The validation state.',
        type: 'SelectWrapperState',
        defaultValue: "'none'",
        allowedValues: ['error', 'none', 'success'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the select color depending on the theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-select-wrapper-dropdown',
    props: [
      {
        name: 'description',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'direction',
        type: 'SelectWrapperDropdownDirection',
        defaultValue: "'auto'",
        allowedValues: ['auto', 'down', 'up'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'disabled',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'filter',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'isOpenOverride',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'label',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'message',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'onOpenChange',
        type: '(isOpen: boolean) => void',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'required',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'selectRef',
        type: 'HTMLSelectElement',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'state',
        type: 'SelectWrapperState',
        allowedValues: ['error', 'none', 'success'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-spinner',
    props: [
      {
        name: 'aria',
        description: 'Add ARIA attributes.',
        type: 'SelectedAriaAttributes<SpinnerAriaAttribute>',
        allowedValues: [null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: true,
        isArray: false,
      },
      {
        name: 'size',
        description: 'Size of the spinner.',
        type: 'BreakpointCustomizable<SpinnerSize>',
        defaultValue: "'small'",
        allowedValues: [
          null,
          null,
          'inherit',
          'medium',
          'large"; s?: "small',
          'inherit',
          'medium',
          'large"; xs?: "small',
          'inherit',
          'medium',
          'large"; m?: "small',
          'inherit',
          'medium',
          'large"; l?: "small',
          'inherit',
          'medium',
          'large"; xl?: "small',
          'inherit',
          'medium',
          'large"; xxl?: "small',
          'inherit',
          'medium',
          'large"; } & { base: "small',
          'inherit',
          'medium',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the spinner color depending on the theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-stepper-horizontal',
    props: [
      {
        name: 'size',
        description: 'The text size.',
        type: 'BreakpointCustomizable<StepperHorizontalSize>',
        defaultValue: "'small'",
        allowedValues: [
          null,
          null,
          'medium"; s?: "small',
          'medium"; xs?: "small',
          'medium"; m?: "small',
          'medium"; l?: "small',
          'medium"; xl?: "small',
          'medium"; xxl?: "small',
          'medium"; } & { base: "small',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the tag color depending on the theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-stepper-horizontal-item',
    props: [
      {
        name: 'disabled',
        description:
          'Disables the stepper-horizontal-item. No events will be triggered while disabled state is active.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'state',
        description: 'The validation state.',
        type: 'StepperHorizontalItemState',
        allowedValues: ['complete', 'current', 'warning'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-switch',
    props: [
      {
        name: 'alignLabel',
        description: 'Aligns the label.',
        type: 'BreakpointCustomizable<SwitchAlignLabel>',
        defaultValue: "'end'",
        allowedValues: [
          null,
          null,
          'right',
          'end',
          'start"; s?: "left',
          'right',
          'end',
          'start"; xs?: "left',
          'right',
          'end',
          'start"; m?: "left',
          'right',
          'end',
          'start"; l?: "left',
          'right',
          'end',
          'start"; xl?: "left',
          'right',
          'end',
          'start"; xxl?: "left',
          'right',
          'end',
          'start"; } & { base: "left',
          'right',
          'end',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'checked',
        description: 'Visualize the switch with on/off status.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'disabled',
        description: 'Disables the switch. No events will be triggered while disabled state is active.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'hideLabel',
        description: "Show or hide label. For better accessibility it's recommended to show the label.",
        type: 'BreakpointCustomizable<boolean>',
        defaultValue: 'false',
        allowedValues: [null, null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'loading',
        description:
          'Disables the switch and shows a loading indicator. No events will be triggered while loading state is active.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'stretch',
        description: 'Stretches the contents to max available space.',
        type: 'BreakpointCustomizable<boolean>',
        defaultValue: 'false',
        allowedValues: [null, null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the switch color depending on the theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-table',
    props: [
      {
        name: 'caption',
        description:
          'A caption describing the contents of the table for accessibility only. This won\'t be visible in the browser.\nUse an element with an attribute of `slot="caption"` for a visible caption.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the color when used on dark background.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  { tag: 'p-table-body', props: [], slots: [], controlledState: [] },
  {
    tag: 'p-table-cell',
    props: [
      {
        name: 'multiline',
        description: 'Displays slotted text multiline or forced into a single line.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  { tag: 'p-table-head', props: [], slots: [], controlledState: [] },
  {
    tag: 'p-table-head-cell',
    props: [
      {
        name: 'hideLabel',
        description:
          'Hides the label but stays accessible for screen readers. This property only takes effect when sort property is not defined.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'multiline',
        description: 'Displays slotted text multiline or forced into a single line.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'sort',
        description: 'Defines sortability properties.',
        type: 'TableHeadCellSort',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  { tag: 'p-table-head-row', props: [], slots: [], controlledState: [] },
  { tag: 'p-table-row', props: [], slots: [], controlledState: [] },
  {
    tag: 'p-tabs',
    props: [
      {
        name: 'activeTabIndex',
        description: 'Defines which tab to be visualized as selected (zero-based numbering).',
        type: 'number',
        defaultValue: '0',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'gradientColor',
        description: 'Adapts the background gradient color of prev and next button.',
        type: 'TabsGradientColor',
        defaultValue: "'background-base'",
        allowedValues: ['background-base', 'background-surface'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'gradientColorScheme',
        description:
          'since v3.0.0, will be removed with next major release, use `gradientColor` instead.\nAdapts the background gradient color of prev and next button.',
        type: 'TabsGradientColorScheme',
        allowedValues: ['default', 'surface'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'size',
        description: 'The text size.',
        type: 'BreakpointCustomizable<TabsSize>',
        defaultValue: "'small'",
        allowedValues: [
          null,
          null,
          'medium"; s?: "small',
          'medium"; xs?: "small',
          'medium"; m?: "small',
          'medium"; l?: "small',
          'medium"; xl?: "small',
          'medium"; xxl?: "small',
          'medium"; } & { base: "small',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the color when used on dark background.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'weight',
        description: 'The text weight.',
        type: 'TabsWeight',
        defaultValue: "'regular'",
        allowedValues: ['regular', 'semi-bold', 'semibold'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-tabs-bar',
    props: [
      {
        name: 'activeTabIndex',
        description:
          'Defines which tab to be visualized as selected (zero-based numbering), undefined if none should be selected.',
        type: 'number | undefined',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'gradientColor',
        description: 'Adapts the background gradient color of prev and next button.',
        type: 'TabsBarGradientColor',
        defaultValue: "'background-base'",
        allowedValues: ['background-base', 'background-surface'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'gradientColorScheme',
        description:
          'since v3.0.0, will be removed with next major release, use `gradientColor` instead.\nAdapts the background gradient color of prev and next button.',
        type: 'TabsBarGradientColorScheme',
        allowedValues: ['default', 'surface'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'size',
        description: 'The text size.',
        type: 'BreakpointCustomizable<TabsBarSize>',
        defaultValue: "'small'",
        allowedValues: [
          null,
          null,
          'medium"; s?: "small',
          'medium"; xs?: "small',
          'medium"; m?: "small',
          'medium"; l?: "small',
          'medium"; xl?: "small',
          'medium"; xxl?: "small',
          'medium"; } & { base: "small',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the color when used on dark background.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'weight',
        description: 'The text weight.',
        type: 'TabsBarWeight',
        defaultValue: "'regular'",
        allowedValues: ['regular', 'semi-bold', 'semibold'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-tabs-item',
    props: [
      {
        name: 'label',
        description: 'Defines the label used in tabs.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-tag',
    props: [
      {
        name: 'color',
        description: 'Background color variations depending on theme property.',
        type: 'TagColor',
        defaultValue: "'background-surface'",
        allowedValues: [
          'background-base',
          'background-default',
          'background-surface',
          'neutral-contrast-high',
          'notification-error',
          'notification-error-soft',
          'notification-info-soft',
          'notification-neutral',
          'notification-success',
          'notification-success-soft',
          'notification-warning',
          'notification-warning-soft',
          'primary',
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'icon',
        description: 'The icon shown.',
        type: 'TagIcon',
        allowedValues: [
          'close',
          'copy',
          'pause',
          'play',
          'reset',
          'sort',
          'map',
          'filter',
          'search',
          'video',
          'image',
          'switch',
          'view',
          'success',
          'list',
          'grid',
          'document',
          'key',
          'light',
          'add',
          'screen',
          'zoom-in',
          'zoom-out',
          'weight',
          'subtract',
          '360',
          'accessibility',
          'active-cabin-ventilation',
          'adjust',
          'arrow-double-down',
          'arrow-double-left',
          'arrow-double-right',
          'arrow-double-up',
          'arrow-down',
          'arrow-first',
          'arrow-head-down',
          'arrow-head-left',
          'arrow-head-right',
          'arrow-head-up',
          'arrow-last',
          'arrow-left',
          'arrow-right',
          'arrow-up',
          'augmented-reality',
          'battery-empty',
          'battery-empty-co2',
          'battery-empty-fuel',
          'battery-full',
          'bell',
          'bookmark',
          'bookmark-filled',
          'broadcast',
          'calculator',
          'calendar',
          'camera',
          'car',
          'car-battery',
          'card',
          'charging-active',
          'charging-state',
          'charging-station',
          'chart',
          'chat',
          'check',
          'city',
          'climate',
          'climate-control',
          'clock',
          'closed-caption',
          'co2-class',
          'co2-emission',
          'compare',
          'configurate',
          'country-road',
          'cubic-capacity',
          'delete',
          'disable',
          'download',
          'duration',
          'edit',
          'email',
          'error-filled',
          'exclamation',
          'external',
          'fingerprint',
          'flash',
          'fuel-station',
          'garage',
          'gift',
          'globe',
          'heart',
          'heart-filled',
          'highway',
          'home',
          'horn',
          'increase',
          'information',
          'information-filled',
          'leaf',
          'leather',
          'locate',
          'lock',
          'lock-open',
          'logo-apple-podcast',
          'logo-baidu',
          'logo-delicious',
          'logo-digg',
          'logo-facebook',
          'logo-foursquare',
          'logo-gmail',
          'logo-google',
          'logo-hatena',
          'logo-instagram',
          'logo-kaixin',
          'logo-kakaotalk',
          'logo-linkedin',
          'logo-naver',
          'logo-pinterest',
          'logo-qq',
          'logo-qq-share',
          'logo-reddit',
          'logo-skyrock',
          'logo-sohu',
          'logo-spotify',
          'logo-tecent',
          'logo-telegram',
          'logo-tiktok',
          'logo-tumblr',
          'logo-twitter',
          'logo-viber',
          'logo-vk',
          'logo-wechat',
          'logo-weibo',
          'logo-whatsapp',
          'logo-x',
          'logo-xing',
          'logo-yahoo',
          'logo-youku',
          'logo-youtube',
          'logout',
          'menu-dots-horizontal',
          'menu-dots-vertical',
          'menu-lines',
          'minus',
          'mobile',
          'moon',
          'oil-can',
          'parking-brake',
          'parking-light',
          'phone',
          'pin',
          'pin-filled',
          'plug',
          'plus',
          'preheating',
          'printer',
          'purchase',
          'push-pin',
          'push-pin-off',
          'qr',
          'question',
          'racing-flag',
          'refresh',
          'replay',
          'roof-closed',
          'roof-open',
          'route',
          'rss',
          'save',
          'send',
          'share',
          'shopping-bag',
          'shopping-bag-filled',
          'shopping-cart',
          'shopping-cart-filled',
          'sidelights',
          'snowflake',
          'stack',
          'star',
          'star-filled',
          'steering-wheel',
          'stopwatch',
          'success-filled',
          'sun',
          'tablet',
          'tachometer',
          'tire',
          'truck',
          'upload',
          'user',
          'user-filled',
          'user-group',
          'user-manual',
          'view-off',
          'volume-off',
          'volume-up',
          'warning',
          'warning-filled',
          'wifi',
          'work',
          'wrench',
          'wrenches',
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'iconSource',
        description: 'A URL path to a custom icon.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the tag color depending on the theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-tag-dismissible',
    props: [
      {
        name: 'aria',
        description: 'Add ARIA attributes.',
        type: 'SelectedAriaAttributes<TagDismissibleAriaAttribute>',
        allowedValues: [null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: true,
        isArray: false,
      },
      {
        name: 'color',
        description: 'Background color variations',
        type: 'TagDismissibleColor',
        defaultValue: "'background-surface'",
        allowedValues: ['background-base', 'background-default', 'background-surface'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'label',
        description: 'The label text.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the color when used on dark background.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-text',
    props: [
      {
        name: 'align',
        description: 'Text alignment of the component.',
        type: 'TextAlign',
        defaultValue: "'start'",
        allowedValues: ['center', 'end', 'left', 'right', 'start'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'color',
        description: 'Basic text color variations depending on theme property.',
        type: 'TextColor',
        defaultValue: "'primary'",
        allowedValues: [
          'brand',
          'contrast-high',
          'contrast-low',
          'contrast-medium',
          'default',
          'inherit',
          'neutral-contrast-high',
          'neutral-contrast-low',
          'neutral-contrast-medium',
          'notification-error',
          'notification-info',
          'notification-neutral',
          'notification-success',
          'notification-warning',
          'primary',
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'ellipsis',
        description: 'Adds an ellipsis to a single line of text if it overflows.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'size',
        description:
          'Size of the text. Also defines the size for specific breakpoints, like {base: "small", l: "medium"}. You always need to provide a base value when doing this.',
        type: 'BreakpointCustomizable<TextSize>',
        defaultValue: "'small'",
        allowedValues: [
          null,
          null,
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; s?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; xs?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; m?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; l?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; xl?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; xxl?: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          'xx-small"; } & { base: "small',
          'inherit',
          'medium',
          'large',
          'x-large',
          'x-small',
          null,
        ],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'tag',
        description: 'Sets a custom HTML tag depending on the usage of the text component.',
        type: 'TextTag',
        defaultValue: "'p'",
        allowedValues: ['address', 'blockquote', 'cite', 'div', 'figcaption', 'legend', 'p', 'span', 'time'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the text color depending on the theme. Has no effect when "inherit" is set as color prop.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'weight',
        description: 'The weight of the text.',
        type: 'TextWeight',
        defaultValue: "'regular'",
        allowedValues: ['bold', 'regular', 'semi-bold', 'semibold', 'thin'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-text-field-wrapper',
    props: [
      {
        name: 'actionIcon',
        description:
          'Action icon can be set to `locate` for `input type="search"` in order to display an action button.',
        type: 'TextFieldWrapperActionIcon',
        allowedValues: ['locate'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'actionLoading',
        description:
          'Disables the action button and shows a loading indicator. No events will be triggered while loading state is active.',
        type: 'boolean',
        defaultValue: 'false',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'description',
        description: 'The description text.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'hideLabel',
        description:
          'Show or hide label and description text. For better accessibility it is recommended to show the label.',
        type: 'BreakpointCustomizable<boolean>',
        defaultValue: 'false',
        allowedValues: [null, null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'label',
        description: 'The label text.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'message',
        description: 'The message styled depending on validation state.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'showCharacterCount',
        description:
          'since v3.0.0, will be removed with next major release, use `showCounter` instead.\nShow or hide max character count.',
        type: 'boolean',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'showCounter',
        description: 'Show or hide max character count.',
        type: 'boolean',
        defaultValue: 'true',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'showPasswordToggle',
        description: 'Show or hide password toggle for `input type="password"`.',
        type: 'boolean',
        defaultValue: 'true',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: true,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'state',
        description: 'The validation state.',
        type: 'TextFieldWrapperState',
        defaultValue: "'none'",
        allowedValues: ['error', 'none', 'success'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'submitButton',
        description: 'Show search button if wrapped inside a form.',
        type: 'boolean',
        defaultValue: 'true',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the color depending on the theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'unit',
        description: 'The unit text.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'unitPosition',
        description: 'The unit position.',
        type: 'TextFieldWrapperUnitPosition',
        defaultValue: "'prefix'",
        allowedValues: ['prefix', 'suffix'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-text-list',
    props: [
      {
        name: 'listType',
        description:
          'since v3.0.0, will be removed with next major release, use `type` instead.\nThe type of the list.',
        type: 'TextListListType',
        allowedValues: ['ordered', 'unordered'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'orderType',
        description:
          "since v3.0.0, will be removed with next major release, use `type` instead.\nThe list style type of ordered list. Only has effect when list type is set to 'ordered'.",
        type: 'TextListOrderType',
        allowedValues: ['alphabetically', 'numbered'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the text color depending on the theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'type',
        description: 'The list style type.',
        type: 'TextListType',
        defaultValue: "'unordered'",
        allowedValues: ['alphabetically', 'numbered', 'unordered'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  { tag: 'p-text-list-item', props: [], slots: [], controlledState: [] },
  {
    tag: 'p-textarea-wrapper',
    props: [
      {
        name: 'description',
        description: 'The description text.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'hideLabel',
        description: 'Show or hide label. For better accessibility it is recommended to show the label.',
        type: 'BreakpointCustomizable<boolean>',
        defaultValue: 'false',
        allowedValues: [null, null, null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: true,
        isAria: false,
        isArray: false,
      },
      {
        name: 'label',
        description: 'The label text.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'message',
        description: 'The message styled depending on validation state.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'showCharacterCount',
        description:
          'since v3.0.0, will be removed with next major release, use `showCounter` instead.\nShow or hide max character count.',
        type: 'boolean',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: true,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'showCounter',
        description: 'Show or hide max character count.',
        type: 'boolean',
        defaultValue: 'true',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'state',
        description: 'The validation state.',
        type: 'TextareaWrapperState',
        defaultValue: "'none'",
        allowedValues: ['error', 'none', 'success'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the color depending on the theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-toast',
    props: [
      {
        name: 'theme',
        description: 'Adapts the toast color depending on the theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-toast-item',
    props: [
      {
        name: 'state',
        description: 'State of the toast-item.',
        type: 'ToastState',
        defaultValue: "'info'",
        allowedValues: ['info', 'neutral', 'success'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'text',
        description: 'Text of the toast-item.',
        type: 'string',
        defaultValue: "''",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts the toast-item color depending on the theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
  {
    tag: 'p-wordmark',
    props: [
      {
        name: 'aria',
        description: 'Add ARIA attributes.',
        type: 'SelectedAriaAttributes<WordmarkAriaAttribute>',
        allowedValues: [null, null, 'time', 'true', 'false', 'page', 'step', 'location', null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: true,
        isArray: false,
      },
      {
        name: 'href',
        description: 'When providing an url then the component will be rendered as `<a>`.',
        type: 'string',
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'size',
        description: 'Adapts sizing of wordmark.',
        type: 'WordmarkSize',
        defaultValue: "'small'",
        allowedValues: ['inherit', 'small'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'target',
        description: 'Target attribute where the link should be opened.',
        type: 'WordmarkTarget',
        defaultValue: "'_self'",
        allowedValues: [null],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
      {
        name: 'theme',
        description: 'Adapts color depending on theme.',
        type: 'Theme',
        defaultValue: "'light'",
        allowedValues: ['auto', 'dark', 'light'],
        deprecatedValues: [],
        isRequired: false,
        isDeprecated: false,
        isExperimental: false,
        isBreakpointCustomizable: false,
        isAria: false,
        isArray: false,
      },
    ],
    slots: [],
    controlledState: [],
  },
];
